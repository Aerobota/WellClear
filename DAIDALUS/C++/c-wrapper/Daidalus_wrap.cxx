/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.6
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * clabels.swg
 *
 * Definitions of C specific preprocessor symbols.
 * ----------------------------------------------------------------------------- */

// this is used instead of default SWIGEXPORT symbol

#ifndef SWIGEXPORTC
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__) || defined(__APPLE__)
#   define SWIGEXPORTC
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORTC __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORTC
#   endif
# endif
#endif

#ifndef SWIGPROTECT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__) || defined(__APPLE__)
#   define SWIGPROTECT(x)
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGPROTECT(x) __attribute__ ((visibility("protected"))) x
#   else
#     define SWIGPROTECT(x)
#   endif
# endif
#endif



#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <setjmp.h>

#define SWIG_STR(x) #x
#define SWIG_contract_assert(expr, msg) if(!(expr)) { printf("%s\n", msg); SWIG_exit(0); } else


typedef struct {
  void *obj;
  const char **typenames;
} SwigObj;


#define SWIG_MAX_RT_STACK 256
#define SWIG_REGISTRY_INIT 256

SWIGINTERN SwigObj **SWIG_registry_base = 0;
SWIGINTERN SwigObj **SWIG_registry = 0;
SWIGINTERN int SWIG_registry_size = SWIG_REGISTRY_INIT;

SWIGINTERN SwigObj *SWIG_create_object(const char *classname);
SWIGINTERN void SWIG_destroy_object(SwigObj *object);
SWIGINTERN void SWIG_free_SwigObj(SwigObj *object);

SWIGEXPORTC struct SWIG_exc_struct {
  int code;
  char *msg;
  SwigObj *klass;
  int handled;
} SWIG_exc = { 0, 0, 0, 0 };

SWIGEXPORTC jmp_buf SWIG_rt_env;
SWIGEXPORTC int SWIG_rt_init = 0;
SWIGINTERN jmp_buf SWIG_cpp_back_env;
SWIGINTERN jmp_buf *SWIG_rt_stack_base = 0;
SWIGINTERN jmp_buf *SWIG_rt_stack_ptr = 0;

SWIGINTERN void SWIG_rt_stack_push() {
  // TODO: check for stack overflow
  memcpy(SWIG_rt_stack_ptr, SWIG_rt_env, sizeof(SWIG_rt_env));
  SWIG_rt_stack_ptr++;
}

SWIGINTERN void SWIG_rt_stack_pop() {
  if (SWIG_rt_stack_ptr == SWIG_rt_stack_base)
    return;
  SWIG_rt_stack_ptr--;
  memcpy(SWIG_rt_env, SWIG_rt_stack_ptr, sizeof(SWIG_rt_env));
}

SWIGINTERN void SWIG_add_registry_entry(SwigObj *entry) {
  if (SWIG_registry_base == 0) {
    SWIG_registry_base = SWIG_registry = (SwigObj **) malloc(SWIG_registry_size * sizeof(SwigObj *));
    memset(SWIG_registry_base, 0, SWIG_registry_size * sizeof(SwigObj *));
  }
  *SWIG_registry = entry;
  SWIG_registry++;
  if ((SWIG_registry - SWIG_registry_base) == SWIG_registry_size) {
    SWIG_registry = SWIG_registry_base;
    SWIG_registry_size += SWIG_REGISTRY_INIT;
    int new_size = SWIG_registry_size * sizeof(SwigObj *);
    SWIG_registry_base = (SwigObj **) malloc(new_size);
    memset(SWIG_registry_base, 0, new_size);
    memcpy(SWIG_registry_base, SWIG_registry, (SWIG_registry_size - SWIG_REGISTRY_INIT) * sizeof(SwigObj *));
    free(SWIG_registry);
    SWIG_registry = SWIG_registry_base + (SWIG_registry_size - SWIG_REGISTRY_INIT);
  }
}

SWIGINTERN void SWIG_remove_registry_entry(SwigObj *entry) {
  int i;
  for (i = 0; i < SWIG_registry_size; ++i) {
    if (*(SWIG_registry_base + i) == entry) {
      *(SWIG_registry_base + i) = 0;
      break;
    }
  }
}

SWIGINTERN void SWIG_free_SwigObj(SwigObj *object) {
  if (object) {
    if (object->typenames)
      free(object->typenames);
    free(object);
    object = (SwigObj *) 0;
  }
}

SWIGINTERN void SWIG_cleanup() {
  if (SWIG_rt_stack_base)
    free(SWIG_rt_stack_base);
  if (SWIG_exc.msg)
   free(SWIG_exc.msg);
  if (SWIG_exc.klass) {
    if (SWIG_exc.klass->typenames)
      free(SWIG_exc.klass->typenames);
    free(SWIG_exc.klass);
  }
  int i;
  if (SWIG_registry_base) {
    for (i = 0; i < SWIG_registry_size; ++i) {
      if (*(SWIG_registry_base + i)) {
        SWIG_free_SwigObj(*(SWIG_registry_base + i));
        *(SWIG_registry_base + i)  = 0;
      }
    }
  }
  free(SWIG_registry_base);
  SWIG_registry_base = 0;
}

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORTC void SWIG_rt_try() {
  SWIG_rt_stack_push();
}

SWIGEXPORTC int SWIG_rt_catch(const char *type) {
  int result = 0;
  if (!type || (strcmp("SWIG_AnyException", type) == 0)) {
    result = 1;
  }
  else if (SWIG_exc.klass) {
    int i = 0;
    while (SWIG_exc.klass->typenames[i]) {
      if (strcmp(SWIG_exc.klass->typenames[i++], type) == 0) {
        result = 1;
        break;
      }
    }
  }
  if (result) {
    SWIG_rt_stack_pop();
    SWIG_exc.handled = 1;
  }
  return result;
}

SWIGEXPORTC void SWIG_rt_throw(SwigObj *klass, const char *msg) {
  if (SWIG_exc.msg) {
    free(SWIG_exc.msg);
    SWIG_exc.msg = (char *) 0;
  }
  if (msg) {
    SWIG_exc.msg = (char *) malloc(strlen(msg) + 1);
    strcpy(SWIG_exc.msg, msg);
  }
  SWIG_exc.klass = klass;
  SWIG_exc.handled = 0;
  longjmp(SWIG_rt_env, 1);
}

SWIGEXPORTC void SWIG_rt_unhandled() {
  if (SWIG_exc.msg) { 
    free(SWIG_exc.msg);
    SWIG_exc.msg = 0;
  }
  SWIG_rt_stack_pop();
  longjmp(SWIG_rt_env, SWIG_exc.code);
}

SWIGEXPORTC void SWIG_rt_endtry() {
  if (SWIG_exc.handled) {
    if (setjmp(SWIG_rt_env) == 0) {
      SWIG_rt_stack_push();
      longjmp(SWIG_cpp_back_env, 1);
    }
  }
  else {
    SWIG_rt_stack_pop();  // pop the SWIG_try context
  }
}

SWIGEXPORTC int SWIG_exit(int code) {
  SWIG_cleanup();
  exit(code);
}

#ifdef __cplusplus
}
#endif

SWIGINTERN void SWIG_terminate() {
  fprintf(stderr, "Unhandled exception: %s\n%s\nExitting...\n", 
    SWIG_exc.klass->typenames[0],
    SWIG_exc.msg ? SWIG_exc.msg : "");
  SWIG_exit(SWIG_exc.code);
}

SWIGINTERN void SWIG_runtime_init() {
  int i, code;
  if (!SWIG_rt_init) {
    SWIG_rt_init = 1;
    SWIG_rt_stack_base = SWIG_rt_stack_ptr = (jmp_buf *) malloc(sizeof(jmp_buf) * SWIG_MAX_RT_STACK);
    if ((SWIG_exc.code = setjmp(SWIG_rt_env))) {
      // deallocate C++ exception
      if (setjmp(SWIG_rt_env) == 0) {
        SWIG_rt_stack_push();
        SWIG_exc.handled = 1;
        longjmp(SWIG_cpp_back_env, 1);
      }
      SWIG_terminate();
    }
  }
}

#define SWIG_CThrowException(klass, msg) \
  if (setjmp(SWIG_cpp_back_env) == 0) \
    SWIG_rt_throw((SwigObj *) klass, msg);

    
  SwigObj *SWIG_temporary = (SwigObj *) malloc(sizeof(SwigObj));


#include <string>


#include "Daidalus.h"
  //#include "Vect3.h"
  //#include "WCVTable.h"
  //#include "WCV_tvar.h"
  //#include "WCV_TAUMOD.h"
  //#include "WCV_TCPA.h"
  //#include "TCASTable.h"
  //#include "TCAS3D.h"
using namespace larcfm;

const char* Swig_typename_Position = "larcfm::Position";

const char* Swig_typename_Velocity = "larcfm::Velocity";

const char* Swig_typename_Interval = "larcfm::Interval";

const char* Swig_typename_BandsRegion = "larcfm::BandsRegion";

const char* Swig_typename_KinematicBands = "larcfm::KinematicBands";

const char* Swig_typename_Daidalus = "larcfm::Daidalus";


SWIGINTERN SwigObj *SWIG_create_object(const char *classname) {
SWIG_runtime_init();
SwigObj *result;
result = (SwigObj *) malloc(sizeof(SwigObj));
result->obj = 0;
if (strcmp(classname, "larcfm::Position") == 0) {
result->typenames = (const char **) malloc(2*sizeof(const char*));
result->typenames[0] = Swig_typename_Position;
result->typenames[1] = 0;
}
if (strcmp(classname, "larcfm::Velocity") == 0) {
result->typenames = (const char **) malloc(2*sizeof(const char*));
result->typenames[0] = Swig_typename_Velocity;
result->typenames[1] = 0;
}
if (strcmp(classname, "larcfm::Interval") == 0) {
result->typenames = (const char **) malloc(2*sizeof(const char*));
result->typenames[0] = Swig_typename_Interval;
result->typenames[1] = 0;
}
if (strcmp(classname, "larcfm::BandsRegion") == 0) {
result->typenames = (const char **) malloc(2*sizeof(const char*));
result->typenames[0] = Swig_typename_BandsRegion;
result->typenames[1] = 0;
}
if (strcmp(classname, "larcfm::KinematicBands") == 0) {
result->typenames = (const char **) malloc(2*sizeof(const char*));
result->typenames[0] = Swig_typename_KinematicBands;
result->typenames[1] = 0;
}
if (strcmp(classname, "larcfm::Daidalus") == 0) {
result->typenames = (const char **) malloc(2*sizeof(const char*));
result->typenames[0] = Swig_typename_Daidalus;
result->typenames[1] = 0;
}
SWIG_add_registry_entry(result);
return result;
}


SWIGINTERN void SWIG_destroy_object(SwigObj *object) {
if (object) {
if (object->typenames) {
if (strcmp(object->typenames[0], "larcfm::Position") == 0) {
if (object->obj)
delete (larcfm::Position *) (object->obj);
}
if (strcmp(object->typenames[0], "larcfm::Velocity") == 0) {
if (object->obj)
delete (larcfm::Velocity *) (object->obj);
}
if (strcmp(object->typenames[0], "larcfm::Interval") == 0) {
if (object->obj)
delete (larcfm::Interval *) (object->obj);
}
if (strcmp(object->typenames[0], "larcfm::BandsRegion") == 0) {
if (object->obj)
delete (larcfm::BandsRegion *) (object->obj);
}
if (strcmp(object->typenames[0], "larcfm::KinematicBands") == 0) {
if (object->obj)
delete (larcfm::KinematicBands *) (object->obj);
}
if (strcmp(object->typenames[0], "larcfm::Daidalus") == 0) {
if (object->obj)
delete (larcfm::Daidalus *) (object->obj);
}
SWIG_free_SwigObj(object);
}
}
}
#ifdef __cplusplus
extern "C" {
#endif
  
  SWIGEXPORTC SwigObj * _wrap_new_Position() {
    SwigObj * result;
    
    result = SWIG_create_object("larcfm::Position");
    result->obj = (void*) new larcfm::Position();
    
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_new_Position_LatLonAlt(SwigObj * carg1) {
    LatLonAlt *arg1 = 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (LatLonAlt *) carg1->obj;
      else
      arg1 = (LatLonAlt *) 0;
    }
    result = SWIG_create_object("larcfm::Position");
    result->obj = (void*) new larcfm::Position((LatLonAlt const &)*arg1);
    
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_new_Position_Vect3(SwigObj * carg1) {
    Vect3 *arg1 = 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (Vect3 *) carg1->obj;
      else
      arg1 = (Vect3 *) 0;
    }
    result = SWIG_create_object("larcfm::Position");
    result->obj = (void*) new larcfm::Position((Vect3 const &)*arg1);
    
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_copy_Position(SwigObj * carg1) {
    larcfm::Position *arg1 = 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
      else
      arg1 = (larcfm::Position *) 0;
    }
    result = SWIG_create_object("larcfm::Position");
    result->obj = (void*) new larcfm::Position((larcfm::Position const &)*arg1);
    
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Position_makeLatLonAlt_d_d_d(double carg1, double carg2, double carg3) {
    larcfm::Position * cppresult;
    double arg1 ;
    double arg2 ;
    double arg3 ;
    SwigObj * result;
    
    arg1 = (double) carg1;
    arg2 = (double) carg2;
    arg3 = (double) carg3;
    {
      const larcfm::Position result_ref =  larcfm::Position::makeLatLonAlt(arg1,arg2,arg3);cppresult = new larcfm::Position(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Position));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Position_makeLatLonAlt_d_s_d_s_d_s(double carg1, char * carg2, double carg3, char * carg4, double carg5, char * carg6) {
    larcfm::Position * cppresult;
    double arg1 ;
    std::string arg2 ;
    double arg3 ;
    std::string arg4 ;
    double arg5 ;
    std::string arg6 ;
    SwigObj * result;
    
    arg1 = (double) carg1;
    {
      if (carg2) {
        (&arg2)->assign(carg2);
      }
      else {
        (&arg2)->resize(0);
      }
    }
    arg3 = (double) carg3;
    {
      if (carg4) {
        (&arg4)->assign(carg4);
      }
      else {
        (&arg4)->resize(0);
      }
    }
    arg5 = (double) carg5;
    {
      if (carg6) {
        (&arg6)->assign(carg6);
      }
      else {
        (&arg6)->resize(0);
      }
    }
    {
      const larcfm::Position result_ref =  larcfm::Position::makeLatLonAlt(arg1,arg2,arg3,arg4,arg5,arg6);cppresult = new larcfm::Position(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Position));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Position_mkLatLonAlt(double carg1, double carg2, double carg3) {
    larcfm::Position * cppresult;
    double arg1 ;
    double arg2 ;
    double arg3 ;
    SwigObj * result;
    
    arg1 = (double) carg1;
    arg2 = (double) carg2;
    arg3 = (double) carg3;
    {
      const larcfm::Position result_ref =  larcfm::Position::mkLatLonAlt(arg1,arg2,arg3);cppresult = new larcfm::Position(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Position));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Position_makeXYZ_d_d_d(double carg1, double carg2, double carg3) {
    larcfm::Position * cppresult;
    double arg1 ;
    double arg2 ;
    double arg3 ;
    SwigObj * result;
    
    arg1 = (double) carg1;
    arg2 = (double) carg2;
    arg3 = (double) carg3;
    {
      const larcfm::Position result_ref =  larcfm::Position::makeXYZ(arg1,arg2,arg3);cppresult = new larcfm::Position(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Position));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Position_mkXYZ(double carg1, double carg2, double carg3) {
    larcfm::Position * cppresult;
    double arg1 ;
    double arg2 ;
    double arg3 ;
    SwigObj * result;
    
    arg1 = (double) carg1;
    arg2 = (double) carg2;
    arg3 = (double) carg3;
    {
      const larcfm::Position result_ref =  larcfm::Position::mkXYZ(arg1,arg2,arg3);cppresult = new larcfm::Position(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Position));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Position_makeXYZ_d_s_d_s_d_s(double carg1, char * carg2, double carg3, char * carg4, double carg5, char * carg6) {
    larcfm::Position * cppresult;
    double arg1 ;
    std::string arg2 ;
    double arg3 ;
    std::string arg4 ;
    double arg5 ;
    std::string arg6 ;
    SwigObj * result;
    
    arg1 = (double) carg1;
    {
      if (carg2) {
        (&arg2)->assign(carg2);
      }
      else {
        (&arg2)->resize(0);
      }
    }
    arg3 = (double) carg3;
    {
      if (carg4) {
        (&arg4)->assign(carg4);
      }
      else {
        (&arg4)->resize(0);
      }
    }
    arg5 = (double) carg5;
    {
      if (carg6) {
        (&arg6)->assign(carg6);
      }
      else {
        (&arg6)->resize(0);
      }
    }
    {
      const larcfm::Position result_ref =  larcfm::Position::makeXYZ(arg1,arg2,arg3,arg4,arg5,arg6);cppresult = new larcfm::Position(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Position));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Position_ZERO_LL() {
    larcfm::Position * cppresult;
    SwigObj * result;
    
    cppresult =  (larcfm::Position *) &larcfm::Position::ZERO_LL();
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Position));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Position_ZERO_XYZ() {
    larcfm::Position * cppresult;
    SwigObj * result;
    
    cppresult =  (larcfm::Position *) &larcfm::Position::ZERO_XYZ();
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Position));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Position_INVALID() {
    larcfm::Position * cppresult;
    SwigObj * result;
    
    cppresult =  (larcfm::Position *) &larcfm::Position::INVALID();
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Position));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC bool _wrap_Position_almostEquals_Position_Position(SwigObj * carg1, SwigObj * carg2) {
    bool cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    larcfm::Position *arg2 = 0 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    {
      if (carg2)
      arg2 = (larcfm::Position *) carg2->obj;
      else
      arg2 = (larcfm::Position *) 0;
    }
    cppresult =  (bool)((larcfm::Position const *)arg1)->almostEquals((larcfm::Position const &)*arg2);
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC bool _wrap_Position_almostEquals_Position_Position_d_d(SwigObj * carg1, SwigObj * carg2, double carg3, double carg4) {
    bool cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    larcfm::Position *arg2 = 0 ;
    double arg3 ;
    double arg4 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    {
      if (carg2)
      arg2 = (larcfm::Position *) carg2->obj;
      else
      arg2 = (larcfm::Position *) 0;
    }
    arg3 = (double) carg3;
    arg4 = (double) carg4;
    cppresult =  (bool)((larcfm::Position const *)arg1)->almostEquals((larcfm::Position const &)*arg2,arg3,arg4);
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Position_vect2(SwigObj * carg1) {
    Vect2 * cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    {
      const Vect2 result_ref =  ((larcfm::Position const *)arg1)->vect2();cppresult = new Vect2(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(Vect2));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Position_point(SwigObj * carg1) {
    Point * cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    cppresult =  (Point *) &((larcfm::Position const *)arg1)->point();
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(Point));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Position_lla(SwigObj * carg1) {
    LatLonAlt * cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    cppresult =  (LatLonAlt *) &((larcfm::Position const *)arg1)->lla();
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(LatLonAlt));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC bool _wrap_Position_isInvalid(SwigObj * carg1) {
    bool cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    cppresult =  (bool)((larcfm::Position const *)arg1)->isInvalid();
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Position_x(SwigObj * carg1) {
    double cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Position const *)arg1)->x();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Position_y(SwigObj * carg1) {
    double cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Position const *)arg1)->y();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Position_z(SwigObj * carg1) {
    double cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Position const *)arg1)->z();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Position_lat(SwigObj * carg1) {
    double cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Position const *)arg1)->lat();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Position_lon(SwigObj * carg1) {
    double cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Position const *)arg1)->lon();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Position_alt(SwigObj * carg1) {
    double cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Position const *)arg1)->alt();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Position_latitude(SwigObj * carg1) {
    double cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Position const *)arg1)->latitude();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Position_longitude(SwigObj * carg1) {
    double cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Position const *)arg1)->longitude();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Position_altitude(SwigObj * carg1) {
    double cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Position const *)arg1)->altitude();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Position_xCoordinate(SwigObj * carg1) {
    double cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Position const *)arg1)->xCoordinate();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Position_yCoordinate(SwigObj * carg1) {
    double cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Position const *)arg1)->yCoordinate();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Position_zCoordinate(SwigObj * carg1) {
    double cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Position const *)arg1)->zCoordinate();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC bool _wrap_Position_isLatLon(SwigObj * carg1) {
    bool cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    cppresult =  (bool)((larcfm::Position const *)arg1)->isLatLon();
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Position_mkX(SwigObj * carg1, double carg2) {
    larcfm::Position * cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    double arg2 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      const larcfm::Position result_ref =  ((larcfm::Position const *)arg1)->mkX(arg2);cppresult = new larcfm::Position(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Position));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Position_mkLon(SwigObj * carg1, double carg2) {
    larcfm::Position * cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    double arg2 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      const larcfm::Position result_ref =  ((larcfm::Position const *)arg1)->mkLon(arg2);cppresult = new larcfm::Position(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Position));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Position_mkY(SwigObj * carg1, double carg2) {
    larcfm::Position * cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    double arg2 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      const larcfm::Position result_ref =  ((larcfm::Position const *)arg1)->mkY(arg2);cppresult = new larcfm::Position(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Position));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Position_mkLat(SwigObj * carg1, double carg2) {
    larcfm::Position * cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    double arg2 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      const larcfm::Position result_ref =  ((larcfm::Position const *)arg1)->mkLat(arg2);cppresult = new larcfm::Position(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Position));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Position_mkZ(SwigObj * carg1, double carg2) {
    larcfm::Position * cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    double arg2 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      const larcfm::Position result_ref =  ((larcfm::Position const *)arg1)->mkZ(arg2);cppresult = new larcfm::Position(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Position));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Position_mkAlt(SwigObj * carg1, double carg2) {
    larcfm::Position * cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    double arg2 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      const larcfm::Position result_ref =  ((larcfm::Position const *)arg1)->mkAlt(arg2);cppresult = new larcfm::Position(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Position));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Position_zeroAlt(SwigObj * carg1) {
    larcfm::Position * cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    {
      const larcfm::Position result_ref =  ((larcfm::Position const *)arg1)->zeroAlt();cppresult = new larcfm::Position(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Position));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Position_distanceH(SwigObj * carg1, SwigObj * carg2) {
    double cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    larcfm::Position *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    {
      if (carg2)
      arg2 = (larcfm::Position *) carg2->obj;
      else
      arg2 = (larcfm::Position *) 0;
    }
    cppresult =  (double)((larcfm::Position const *)arg1)->distanceH((larcfm::Position const &)*arg2);
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Position_distanceV(SwigObj * carg1, SwigObj * carg2) {
    double cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    larcfm::Position *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    {
      if (carg2)
      arg2 = (larcfm::Position *) carg2->obj;
      else
      arg2 = (larcfm::Position *) 0;
    }
    cppresult =  (double)((larcfm::Position const *)arg1)->distanceV((larcfm::Position const &)*arg2);
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Position_signedDistanceV(SwigObj * carg1, SwigObj * carg2) {
    double cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    larcfm::Position *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    {
      if (carg2)
      arg2 = (larcfm::Position *) carg2->obj;
      else
      arg2 = (larcfm::Position *) 0;
    }
    cppresult =  (double)((larcfm::Position const *)arg1)->signedDistanceV((larcfm::Position const &)*arg2);
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Position_linear(SwigObj * carg1, SwigObj * carg2, double carg3) {
    larcfm::Position * cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    Velocity *arg2 = 0 ;
    double arg3 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    {
      if (carg2)
      arg2 = (Velocity *) carg2->obj;
      else
      arg2 = (Velocity *) 0;
    }
    arg3 = (double) carg3;
    {
      const larcfm::Position result_ref =  ((larcfm::Position const *)arg1)->linear((Velocity const &)*arg2,arg3);cppresult = new larcfm::Position(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Position));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Position_linearEst_Position_d_d(SwigObj * carg1, double carg2, double carg3) {
    larcfm::Position * cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    double arg2 ;
    double arg3 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    arg2 = (double) carg2;
    arg3 = (double) carg3;
    {
      const larcfm::Position result_ref =  ((larcfm::Position const *)arg1)->linearEst(arg2,arg3);cppresult = new larcfm::Position(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Position));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Position_linearEst_Position_Velocity_d(SwigObj * carg1, SwigObj * carg2, double carg3) {
    larcfm::Position * cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    Velocity *arg2 = 0 ;
    double arg3 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    {
      if (carg2)
      arg2 = (Velocity *) carg2->obj;
      else
      arg2 = (Velocity *) 0;
    }
    arg3 = (double) carg3;
    {
      const larcfm::Position result_ref =  ((larcfm::Position const *)arg1)->linearEst((Velocity const &)*arg2,arg3);cppresult = new larcfm::Position(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Position));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Position_midPoint(SwigObj * carg1, SwigObj * carg2) {
    larcfm::Position * cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    larcfm::Position *arg2 = 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    {
      if (carg2)
      arg2 = (larcfm::Position *) carg2->obj;
      else
      arg2 = (larcfm::Position *) 0;
    }
    {
      const larcfm::Position result_ref =  ((larcfm::Position const *)arg1)->midPoint((larcfm::Position const &)*arg2);cppresult = new larcfm::Position(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Position));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Position_track(SwigObj * carg1, SwigObj * carg2) {
    double cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    larcfm::Position *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    {
      if (carg2)
      arg2 = (larcfm::Position *) carg2->obj;
      else
      arg2 = (larcfm::Position *) 0;
    }
    cppresult =  (double)((larcfm::Position const *)arg1)->track((larcfm::Position const &)*arg2);
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Position_initialVelocity(SwigObj * carg1, SwigObj * carg2, double carg3) {
    Velocity * cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    larcfm::Position *arg2 = 0 ;
    double arg3 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    {
      if (carg2)
      arg2 = (larcfm::Position *) carg2->obj;
      else
      arg2 = (larcfm::Position *) 0;
    }
    arg3 = (double) carg3;
    {
      const Velocity result_ref =  ((larcfm::Position const *)arg1)->initialVelocity((larcfm::Position const &)*arg2,arg3);cppresult = new Velocity(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(Velocity));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Position_finalVelocity(SwigObj * carg1, SwigObj * carg2, double carg3) {
    Velocity * cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    larcfm::Position *arg2 = 0 ;
    double arg3 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    {
      if (carg2)
      arg2 = (larcfm::Position *) carg2->obj;
      else
      arg2 = (larcfm::Position *) 0;
    }
    arg3 = (double) carg3;
    {
      const Velocity result_ref =  ((larcfm::Position const *)arg1)->finalVelocity((larcfm::Position const &)*arg2,arg3);cppresult = new Velocity(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(Velocity));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Position_representativeTrack(SwigObj * carg1, SwigObj * carg2) {
    double cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    larcfm::Position *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    {
      if (carg2)
      arg2 = (larcfm::Position *) carg2->obj;
      else
      arg2 = (larcfm::Position *) 0;
    }
    cppresult =  (double)((larcfm::Position const *)arg1)->representativeTrack((larcfm::Position const &)*arg2);
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC bool _wrap_Position_LoS(SwigObj * carg1, SwigObj * carg2, double carg3, double carg4) {
    bool cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    larcfm::Position *arg2 = 0 ;
    double arg3 ;
    double arg4 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    {
      if (carg2)
      arg2 = (larcfm::Position *) carg2->obj;
      else
      arg2 = (larcfm::Position *) 0;
    }
    arg3 = (double) carg3;
    arg4 = (double) carg4;
    cppresult =  (bool)(arg1)->LoS((larcfm::Position const &)*arg2,arg3,arg4);
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC bool _wrap_Position_collinear(SwigObj * carg1, SwigObj * carg2, SwigObj * carg3) {
    bool cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    larcfm::Position arg2 ;
    larcfm::Position arg3 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    {
      arg2 = *(larcfm::Position *) (carg2->obj);
    }
    {
      arg3 = *(larcfm::Position *) (carg3->obj);
    }
    cppresult =  (bool)((larcfm::Position const *)arg1)->collinear(arg2,arg3);
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC char * _wrap_Position_toString_Position(SwigObj * carg1) {
    std::string* cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    char * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    {
      const std::string result_ref =  ((larcfm::Position const *)arg1)->toString();cppresult = new std::string(result_ref);
    }
    {
      const char *str = cppresult->c_str();
      size_t len = strlen(str);
      result = (char *) malloc(len + 1);
      memcpy(result, str, len);
      result[len] = '\0';
    }
    return result;
  }
  
  
  SWIGEXPORTC char * _wrap_Position_toString_Position_i(SwigObj * carg1, int carg2) {
    std::string* cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    int arg2 ;
    char * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    arg2 = (int) carg2;
    {
      const std::string result_ref =  ((larcfm::Position const *)arg1)->toString(arg2);cppresult = new std::string(result_ref);
    }
    {
      const char *str = cppresult->c_str();
      size_t len = strlen(str);
      result = (char *) malloc(len + 1);
      memcpy(result, str, len);
      result[len] = '\0';
    }
    return result;
  }
  
  
  SWIGEXPORTC char * _wrap_Position_toStringUnits_Position(SwigObj * carg1) {
    std::string* cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    char * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    {
      const std::string result_ref =  ((larcfm::Position const *)arg1)->toStringUnits();cppresult = new std::string(result_ref);
    }
    {
      const char *str = cppresult->c_str();
      size_t len = strlen(str);
      result = (char *) malloc(len + 1);
      memcpy(result, str, len);
      result[len] = '\0';
    }
    return result;
  }
  
  
  SWIGEXPORTC char * _wrap_Position_toStringUnits_Position_s_s_s(SwigObj * carg1, char * carg2, char * carg3, char * carg4) {
    std::string* cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    char * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    {
      if (carg4) {
        arg4 = new std::string(carg4);
      }
      else {
        arg4 = new std::string();
        arg4->resize(0);
      }
    }
    {
      const std::string result_ref =  ((larcfm::Position const *)arg1)->toStringUnits((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);cppresult = new std::string(result_ref);
    }
    {
      const char *str = cppresult->c_str();
      size_t len = strlen(str);
      result = (char *) malloc(len + 1);
      memcpy(result, str, len);
      result[len] = '\0';
    }
    {
      if (arg2)
      delete arg2;
    }
    {
      if (arg3)
      delete arg3;
    }
    {
      if (arg4)
      delete arg4;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Position_toStringList_Position(SwigObj * carg1) {
    std::vector< std::string > * cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    {
      const std::vector< std::string > result_ref =  ((larcfm::Position const *)arg1)->toStringList();cppresult = new std::vector< std::string >(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(std::vector< std::string >));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Position_toStringList_Position_i(SwigObj * carg1, int carg2) {
    std::vector< std::string > * cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    int arg2 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    arg2 = (int) carg2;
    {
      const std::vector< std::string > result_ref =  ((larcfm::Position const *)arg1)->toStringList(arg2);cppresult = new std::vector< std::string >(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(std::vector< std::string >));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC char * _wrap_Position_toStringNP_Position(SwigObj * carg1) {
    std::string* cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    char * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    {
      const std::string result_ref =  ((larcfm::Position const *)arg1)->toStringNP();cppresult = new std::string(result_ref);
    }
    {
      const char *str = cppresult->c_str();
      size_t len = strlen(str);
      result = (char *) malloc(len + 1);
      memcpy(result, str, len);
      result[len] = '\0';
    }
    return result;
  }
  
  
  SWIGEXPORTC char * _wrap_Position_toStringNP_Position_i(SwigObj * carg1, int carg2) {
    std::string* cppresult;
    larcfm::Position *arg1 = (larcfm::Position *) 0 ;
    int arg2 ;
    char * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Position *) carg1->obj;
    }
    arg2 = (int) carg2;
    {
      const std::string result_ref =  ((larcfm::Position const *)arg1)->toStringNP(arg2);cppresult = new std::string(result_ref);
    }
    {
      const char *str = cppresult->c_str();
      size_t len = strlen(str);
      result = (char *) malloc(len + 1);
      memcpy(result, str, len);
      result[len] = '\0';
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Position_parseLL(char * carg1) {
    larcfm::Position * cppresult;
    std::string *arg1 = 0 ;
    SwigObj * result;
    
    {
      if (carg1) {
        arg1 = new std::string(carg1);
      }
      else {
        arg1 = new std::string();
        arg1->resize(0);
      }
    }
    {
      const larcfm::Position result_ref =  larcfm::Position::parseLL((std::string const &)*arg1);cppresult = new larcfm::Position(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Position));
      result->obj = (void*) cppresult;
    }
    {
      if (arg1)
      delete arg1;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Position_parseXYZ(char * carg1) {
    larcfm::Position * cppresult;
    std::string *arg1 = 0 ;
    SwigObj * result;
    
    {
      if (carg1) {
        arg1 = new std::string(carg1);
      }
      else {
        arg1 = new std::string();
        arg1->resize(0);
      }
    }
    {
      const larcfm::Position result_ref =  larcfm::Position::parseXYZ((std::string const &)*arg1);cppresult = new larcfm::Position(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Position));
      result->obj = (void*) cppresult;
    }
    {
      if (arg1)
      delete arg1;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Position_parse(char * carg1) {
    larcfm::Position * cppresult;
    std::string *arg1 = 0 ;
    SwigObj * result;
    
    {
      if (carg1) {
        arg1 = new std::string(carg1);
      }
      else {
        arg1 = new std::string();
        arg1->resize(0);
      }
    }
    {
      const larcfm::Position result_ref =  larcfm::Position::parse((std::string const &)*arg1);cppresult = new larcfm::Position(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Position));
      result->obj = (void*) cppresult;
    }
    {
      if (arg1)
      delete arg1;
    }
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_delete_Position(SwigObj * carg1) {
    SWIG_remove_registry_entry(carg1);
    SWIG_destroy_object(carg1);
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_new_Velocity() {
    SwigObj * result;
    
    result = SWIG_create_object("larcfm::Velocity");
    result->obj = (void*) new larcfm::Velocity();
    
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_new_Velocity_Vect3(SwigObj * carg1) {
    Vect3 *arg1 = 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (Vect3 *) carg1->obj;
      else
      arg1 = (Vect3 *) 0;
    }
    result = SWIG_create_object("larcfm::Velocity");
    result->obj = (void*) new larcfm::Velocity((Vect3 const &)*arg1);
    
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Velocity_angle_Velocity_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::Velocity *arg1 = (larcfm::Velocity *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Velocity *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::Velocity const *)arg1)->angle((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Velocity_angle_Velocity(SwigObj * carg1) {
    double cppresult;
    larcfm::Velocity *arg1 = (larcfm::Velocity *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Velocity *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Velocity const *)arg1)->angle();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Velocity_trk(SwigObj * carg1) {
    double cppresult;
    larcfm::Velocity *arg1 = (larcfm::Velocity *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Velocity *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Velocity const *)arg1)->trk();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Velocity_track(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::Velocity *arg1 = (larcfm::Velocity *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Velocity *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::Velocity const *)arg1)->track((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Velocity_compassAngle_Velocity(SwigObj * carg1) {
    double cppresult;
    larcfm::Velocity *arg1 = (larcfm::Velocity *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Velocity *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Velocity const *)arg1)->compassAngle();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Velocity_compassAngle_Velocity_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::Velocity *arg1 = (larcfm::Velocity *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Velocity *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::Velocity const *)arg1)->compassAngle((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Velocity_gs(SwigObj * carg1) {
    double cppresult;
    larcfm::Velocity *arg1 = (larcfm::Velocity *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Velocity *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Velocity const *)arg1)->gs();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Velocity_groundSpeed(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::Velocity *arg1 = (larcfm::Velocity *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Velocity *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::Velocity const *)arg1)->groundSpeed((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Velocity_vs(SwigObj * carg1) {
    double cppresult;
    larcfm::Velocity *arg1 = (larcfm::Velocity *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Velocity *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Velocity const *)arg1)->vs();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Velocity_verticalSpeed(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::Velocity *arg1 = (larcfm::Velocity *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Velocity *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::Velocity const *)arg1)->verticalSpeed((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC bool _wrap_Velocity_compare(SwigObj * carg1, SwigObj * carg2, double carg3, double carg4, double carg5) {
    bool cppresult;
    larcfm::Velocity *arg1 = (larcfm::Velocity *) 0 ;
    larcfm::Velocity *arg2 = 0 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::Velocity *) carg1->obj;
    }
    {
      if (carg2)
      arg2 = (larcfm::Velocity *) carg2->obj;
      else
      arg2 = (larcfm::Velocity *) 0;
    }
    arg3 = (double) carg3;
    arg4 = (double) carg4;
    arg5 = (double) carg5;
    cppresult =  (bool)(arg1)->compare((larcfm::Velocity const &)*arg2,arg3,arg4,arg5);
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC char * _wrap_Velocity_toString_Velocity(SwigObj * carg1) {
    std::string* cppresult;
    larcfm::Velocity *arg1 = (larcfm::Velocity *) 0 ;
    char * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Velocity *) carg1->obj;
    }
    {
      const std::string result_ref =  ((larcfm::Velocity const *)arg1)->toString();cppresult = new std::string(result_ref);
    }
    {
      const char *str = cppresult->c_str();
      size_t len = strlen(str);
      result = (char *) malloc(len + 1);
      memcpy(result, str, len);
      result[len] = '\0';
    }
    return result;
  }
  
  
  SWIGEXPORTC char * _wrap_Velocity_toString_Velocity_i(SwigObj * carg1, int carg2) {
    std::string* cppresult;
    larcfm::Velocity *arg1 = (larcfm::Velocity *) 0 ;
    int arg2 ;
    char * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Velocity *) carg1->obj;
    }
    arg2 = (int) carg2;
    {
      const std::string result_ref =  ((larcfm::Velocity const *)arg1)->toString(arg2);cppresult = new std::string(result_ref);
    }
    {
      const char *str = cppresult->c_str();
      size_t len = strlen(str);
      result = (char *) malloc(len + 1);
      memcpy(result, str, len);
      result[len] = '\0';
    }
    return result;
  }
  
  
  SWIGEXPORTC char * _wrap_Velocity_toStringUnits_Velocity(SwigObj * carg1) {
    std::string* cppresult;
    larcfm::Velocity *arg1 = (larcfm::Velocity *) 0 ;
    char * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Velocity *) carg1->obj;
    }
    {
      const std::string result_ref =  ((larcfm::Velocity const *)arg1)->toStringUnits();cppresult = new std::string(result_ref);
    }
    {
      const char *str = cppresult->c_str();
      size_t len = strlen(str);
      result = (char *) malloc(len + 1);
      memcpy(result, str, len);
      result[len] = '\0';
    }
    return result;
  }
  
  
  SWIGEXPORTC char * _wrap_Velocity_toStringUnits_Velocity_s_s_s(SwigObj * carg1, char * carg2, char * carg3, char * carg4) {
    std::string* cppresult;
    larcfm::Velocity *arg1 = (larcfm::Velocity *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    char * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Velocity *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    {
      if (carg4) {
        arg4 = new std::string(carg4);
      }
      else {
        arg4 = new std::string();
        arg4->resize(0);
      }
    }
    {
      const std::string result_ref =  ((larcfm::Velocity const *)arg1)->toStringUnits((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);cppresult = new std::string(result_ref);
    }
    {
      const char *str = cppresult->c_str();
      size_t len = strlen(str);
      result = (char *) malloc(len + 1);
      memcpy(result, str, len);
      result[len] = '\0';
    }
    {
      if (arg2)
      delete arg2;
    }
    {
      if (arg3)
      delete arg3;
    }
    {
      if (arg4)
      delete arg4;
    }
    return result;
  }
  
  
  SWIGEXPORTC char * _wrap_Velocity_toStringXYZ_Velocity(SwigObj * carg1) {
    std::string* cppresult;
    larcfm::Velocity *arg1 = (larcfm::Velocity *) 0 ;
    char * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Velocity *) carg1->obj;
    }
    {
      const std::string result_ref =  ((larcfm::Velocity const *)arg1)->toStringXYZ();cppresult = new std::string(result_ref);
    }
    {
      const char *str = cppresult->c_str();
      size_t len = strlen(str);
      result = (char *) malloc(len + 1);
      memcpy(result, str, len);
      result[len] = '\0';
    }
    return result;
  }
  
  
  SWIGEXPORTC char * _wrap_Velocity_toStringXYZ_Velocity_i(SwigObj * carg1, int carg2) {
    std::string* cppresult;
    larcfm::Velocity *arg1 = (larcfm::Velocity *) 0 ;
    int arg2 ;
    char * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Velocity *) carg1->obj;
    }
    arg2 = (int) carg2;
    {
      const std::string result_ref =  ((larcfm::Velocity const *)arg1)->toStringXYZ(arg2);cppresult = new std::string(result_ref);
    }
    {
      const char *str = cppresult->c_str();
      size_t len = strlen(str);
      result = (char *) malloc(len + 1);
      memcpy(result, str, len);
      result[len] = '\0';
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Velocity_toStringList_Velocity(SwigObj * carg1) {
    std::vector< std::string > * cppresult;
    larcfm::Velocity *arg1 = (larcfm::Velocity *) 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Velocity *) carg1->obj;
    }
    {
      const std::vector< std::string > result_ref =  ((larcfm::Velocity const *)arg1)->toStringList();cppresult = new std::vector< std::string >(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(std::vector< std::string >));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Velocity_toStringList_Velocity_i(SwigObj * carg1, int carg2) {
    std::vector< std::string > * cppresult;
    larcfm::Velocity *arg1 = (larcfm::Velocity *) 0 ;
    int arg2 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Velocity *) carg1->obj;
    }
    arg2 = (int) carg2;
    {
      const std::vector< std::string > result_ref =  ((larcfm::Velocity const *)arg1)->toStringList(arg2);cppresult = new std::vector< std::string >(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(std::vector< std::string >));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Velocity_toStringXYZList_Velocity(SwigObj * carg1) {
    std::vector< std::string > * cppresult;
    larcfm::Velocity *arg1 = (larcfm::Velocity *) 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Velocity *) carg1->obj;
    }
    {
      const std::vector< std::string > result_ref =  ((larcfm::Velocity const *)arg1)->toStringXYZList();cppresult = new std::vector< std::string >(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(std::vector< std::string >));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Velocity_toStringXYZList_Velocity_i(SwigObj * carg1, int carg2) {
    std::vector< std::string > * cppresult;
    larcfm::Velocity *arg1 = (larcfm::Velocity *) 0 ;
    int arg2 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Velocity *) carg1->obj;
    }
    arg2 = (int) carg2;
    {
      const std::vector< std::string > result_ref =  ((larcfm::Velocity const *)arg1)->toStringXYZList(arg2);cppresult = new std::vector< std::string >(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(std::vector< std::string >));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC char * _wrap_Velocity_toStringNP_Velocity(SwigObj * carg1) {
    std::string* cppresult;
    larcfm::Velocity *arg1 = (larcfm::Velocity *) 0 ;
    char * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Velocity *) carg1->obj;
    }
    {
      const std::string result_ref =  ((larcfm::Velocity const *)arg1)->toStringNP();cppresult = new std::string(result_ref);
    }
    {
      const char *str = cppresult->c_str();
      size_t len = strlen(str);
      result = (char *) malloc(len + 1);
      memcpy(result, str, len);
      result[len] = '\0';
    }
    return result;
  }
  
  
  SWIGEXPORTC char * _wrap_Velocity_toStringNP_Velocity_i(SwigObj * carg1, int carg2) {
    std::string* cppresult;
    larcfm::Velocity *arg1 = (larcfm::Velocity *) 0 ;
    int arg2 ;
    char * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Velocity *) carg1->obj;
    }
    arg2 = (int) carg2;
    {
      const std::string result_ref =  ((larcfm::Velocity const *)arg1)->toStringNP(arg2);cppresult = new std::string(result_ref);
    }
    {
      const char *str = cppresult->c_str();
      size_t len = strlen(str);
      result = (char *) malloc(len + 1);
      memcpy(result, str, len);
      result[len] = '\0';
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Velocity_make_Vect3(SwigObj * carg1) {
    larcfm::Velocity * cppresult;
    Vect3 *arg1 = 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (Vect3 *) carg1->obj;
      else
      arg1 = (Vect3 *) 0;
    }
    {
      const larcfm::Velocity result_ref =  larcfm::Velocity::make((Vect3 const &)*arg1);cppresult = new larcfm::Velocity(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Velocity));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Velocity_make_Vect2(SwigObj * carg1) {
    larcfm::Velocity * cppresult;
    Vect2 *arg1 = 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (Vect2 *) carg1->obj;
      else
      arg1 = (Vect2 *) 0;
    }
    {
      const larcfm::Velocity result_ref =  larcfm::Velocity::make((Vect2 const &)*arg1);cppresult = new larcfm::Velocity(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Velocity));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Velocity_mkVxyz(double carg1, double carg2, double carg3) {
    larcfm::Velocity * cppresult;
    double arg1 ;
    double arg2 ;
    double arg3 ;
    SwigObj * result;
    
    arg1 = (double) carg1;
    arg2 = (double) carg2;
    arg3 = (double) carg3;
    {
      const larcfm::Velocity result_ref =  larcfm::Velocity::mkVxyz(arg1,arg2,arg3);cppresult = new larcfm::Velocity(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Velocity));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Velocity_makeVxyz_d_d_d(double carg1, double carg2, double carg3) {
    larcfm::Velocity * cppresult;
    double arg1 ;
    double arg2 ;
    double arg3 ;
    SwigObj * result;
    
    arg1 = (double) carg1;
    arg2 = (double) carg2;
    arg3 = (double) carg3;
    {
      const larcfm::Velocity result_ref =  larcfm::Velocity::makeVxyz(arg1,arg2,arg3);cppresult = new larcfm::Velocity(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Velocity));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Velocity_makeVxyz_d_d_s_d_s(double carg1, double carg2, char * carg3, double carg4, char * carg5) {
    larcfm::Velocity * cppresult;
    double arg1 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    double arg4 ;
    std::string *arg5 = 0 ;
    SwigObj * result;
    
    arg1 = (double) carg1;
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    arg4 = (double) carg4;
    {
      if (carg5) {
        arg5 = new std::string(carg5);
      }
      else {
        arg5 = new std::string();
        arg5->resize(0);
      }
    }
    {
      const larcfm::Velocity result_ref =  larcfm::Velocity::makeVxyz(arg1,arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);cppresult = new larcfm::Velocity(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Velocity));
      result->obj = (void*) cppresult;
    }
    {
      if (arg3)
      delete arg3;
    }
    {
      if (arg5)
      delete arg5;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Velocity_mkTrkGsVs(double carg1, double carg2, double carg3) {
    larcfm::Velocity * cppresult;
    double arg1 ;
    double arg2 ;
    double arg3 ;
    SwigObj * result;
    
    arg1 = (double) carg1;
    arg2 = (double) carg2;
    arg3 = (double) carg3;
    {
      const larcfm::Velocity result_ref =  larcfm::Velocity::mkTrkGsVs(arg1,arg2,arg3);cppresult = new larcfm::Velocity(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Velocity));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Velocity_makeTrkGsVs_d_d_d(double carg1, double carg2, double carg3) {
    larcfm::Velocity * cppresult;
    double arg1 ;
    double arg2 ;
    double arg3 ;
    SwigObj * result;
    
    arg1 = (double) carg1;
    arg2 = (double) carg2;
    arg3 = (double) carg3;
    {
      const larcfm::Velocity result_ref =  larcfm::Velocity::makeTrkGsVs(arg1,arg2,arg3);cppresult = new larcfm::Velocity(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Velocity));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Velocity_makeTrkGsVs_d_s_d_s_d_s(double carg1, char * carg2, double carg3, char * carg4, double carg5, char * carg6) {
    larcfm::Velocity * cppresult;
    double arg1 ;
    std::string *arg2 = 0 ;
    double arg3 ;
    std::string *arg4 = 0 ;
    double arg5 ;
    std::string *arg6 = 0 ;
    SwigObj * result;
    
    arg1 = (double) carg1;
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    arg3 = (double) carg3;
    {
      if (carg4) {
        arg4 = new std::string(carg4);
      }
      else {
        arg4 = new std::string();
        arg4->resize(0);
      }
    }
    arg5 = (double) carg5;
    {
      if (carg6) {
        arg6 = new std::string(carg6);
      }
      else {
        arg6 = new std::string();
        arg6->resize(0);
      }
    }
    {
      const larcfm::Velocity result_ref =  larcfm::Velocity::makeTrkGsVs(arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4,arg5,(std::string const &)*arg6);cppresult = new larcfm::Velocity(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Velocity));
      result->obj = (void*) cppresult;
    }
    {
      if (arg2)
      delete arg2;
    }
    {
      if (arg4)
      delete arg4;
    }
    {
      if (arg6)
      delete arg6;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Velocity_makeVel(SwigObj * carg1, SwigObj * carg2, double carg3) {
    larcfm::Velocity * cppresult;
    Vect3 *arg1 = 0 ;
    Vect3 *arg2 = 0 ;
    double arg3 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (Vect3 *) carg1->obj;
      else
      arg1 = (Vect3 *) 0;
    }
    {
      if (carg2)
      arg2 = (Vect3 *) carg2->obj;
      else
      arg2 = (Vect3 *) 0;
    }
    arg3 = (double) carg3;
    {
      const larcfm::Velocity result_ref =  larcfm::Velocity::makeVel((Vect3 const &)*arg1,(Vect3 const &)*arg2,arg3);cppresult = new larcfm::Velocity(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Velocity));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Velocity_genVel(SwigObj * carg1, SwigObj * carg2, double carg3) {
    larcfm::Velocity * cppresult;
    Vect3 *arg1 = 0 ;
    Vect3 *arg2 = 0 ;
    double arg3 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (Vect3 *) carg1->obj;
      else
      arg1 = (Vect3 *) 0;
    }
    {
      if (carg2)
      arg2 = (Vect3 *) carg2->obj;
      else
      arg2 = (Vect3 *) 0;
    }
    arg3 = (double) carg3;
    {
      const larcfm::Velocity result_ref =  larcfm::Velocity::genVel((Vect3 const &)*arg1,(Vect3 const &)*arg2,arg3);cppresult = new larcfm::Velocity(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Velocity));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Velocity_mkAddTrk(SwigObj * carg1, double carg2) {
    larcfm::Velocity * cppresult;
    larcfm::Velocity *arg1 = (larcfm::Velocity *) 0 ;
    double arg2 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Velocity *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      const larcfm::Velocity result_ref =  ((larcfm::Velocity const *)arg1)->mkAddTrk(arg2);cppresult = new larcfm::Velocity(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Velocity));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Velocity_ZEROV_get() {
    const larcfm::Velocity * cppresult;
    SwigObj * result;
    
    cppresult =  (larcfm::Velocity *)&larcfm::Velocity::ZEROV;
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Velocity));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Velocity_INVALIDV() {
    larcfm::Velocity * cppresult;
    SwigObj * result;
    
    cppresult =  (larcfm::Velocity *) &larcfm::Velocity::INVALIDV();
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Velocity));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Velocity_trkgs2vx(double carg1, double carg2) {
    double cppresult;
    double arg1 ;
    double arg2 ;
    double result;
    
    arg1 = (double) carg1;
    arg2 = (double) carg2;
    cppresult =  (double)larcfm::Velocity::trkgs2vx(arg1,arg2);
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Velocity_trkgs2vy(double carg1, double carg2) {
    double cppresult;
    double arg1 ;
    double arg2 ;
    double result;
    
    arg1 = (double) carg1;
    arg2 = (double) carg2;
    cppresult =  (double)larcfm::Velocity::trkgs2vy(arg1,arg2);
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Velocity_trkgs2v(double carg1, double carg2) {
    Vect2 * cppresult;
    double arg1 ;
    double arg2 ;
    SwigObj * result;
    
    arg1 = (double) carg1;
    arg2 = (double) carg2;
    {
      const Vect2 result_ref =  larcfm::Velocity::trkgs2v(arg1,arg2);cppresult = new Vect2(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(Vect2));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Velocity_mkTrk_Velocity_d(SwigObj * carg1, double carg2) {
    larcfm::Velocity * cppresult;
    larcfm::Velocity *arg1 = (larcfm::Velocity *) 0 ;
    double arg2 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Velocity *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      const larcfm::Velocity result_ref =  ((larcfm::Velocity const *)arg1)->mkTrk(arg2);cppresult = new larcfm::Velocity(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Velocity));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Velocity_mkTrk_Velocity_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::Velocity * cppresult;
    larcfm::Velocity *arg1 = (larcfm::Velocity *) 0 ;
    double arg2 ;
    std::string arg3 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Velocity *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        (&arg3)->assign(carg3);
      }
      else {
        (&arg3)->resize(0);
      }
    }
    {
      const larcfm::Velocity result_ref =  ((larcfm::Velocity const *)arg1)->mkTrk(arg2,arg3);cppresult = new larcfm::Velocity(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Velocity));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Velocity_mkGs_Velocity_d(SwigObj * carg1, double carg2) {
    larcfm::Velocity * cppresult;
    larcfm::Velocity *arg1 = (larcfm::Velocity *) 0 ;
    double arg2 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Velocity *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      const larcfm::Velocity result_ref =  ((larcfm::Velocity const *)arg1)->mkGs(arg2);cppresult = new larcfm::Velocity(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Velocity));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Velocity_mkGs_Velocity_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::Velocity * cppresult;
    larcfm::Velocity *arg1 = (larcfm::Velocity *) 0 ;
    double arg2 ;
    std::string arg3 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Velocity *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        (&arg3)->assign(carg3);
      }
      else {
        (&arg3)->resize(0);
      }
    }
    {
      const larcfm::Velocity result_ref =  ((larcfm::Velocity const *)arg1)->mkGs(arg2,arg3);cppresult = new larcfm::Velocity(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Velocity));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Velocity_mkVs_Velocity_d(SwigObj * carg1, double carg2) {
    larcfm::Velocity * cppresult;
    larcfm::Velocity *arg1 = (larcfm::Velocity *) 0 ;
    double arg2 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Velocity *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      const larcfm::Velocity result_ref =  ((larcfm::Velocity const *)arg1)->mkVs(arg2);cppresult = new larcfm::Velocity(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Velocity));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Velocity_mkVs_Velocity_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::Velocity * cppresult;
    larcfm::Velocity *arg1 = (larcfm::Velocity *) 0 ;
    double arg2 ;
    std::string arg3 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Velocity *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        (&arg3)->assign(carg3);
      }
      else {
        (&arg3)->resize(0);
      }
    }
    {
      const larcfm::Velocity result_ref =  ((larcfm::Velocity const *)arg1)->mkVs(arg2,arg3);cppresult = new larcfm::Velocity(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Velocity));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Velocity_Hat(SwigObj * carg1) {
    larcfm::Velocity * cppresult;
    larcfm::Velocity *arg1 = (larcfm::Velocity *) 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Velocity *) carg1->obj;
    }
    {
      const larcfm::Velocity result_ref =  ((larcfm::Velocity const *)arg1)->Hat();cppresult = new larcfm::Velocity(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Velocity));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Velocity_Neg(SwigObj * carg1) {
    larcfm::Velocity * cppresult;
    larcfm::Velocity *arg1 = (larcfm::Velocity *) 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Velocity *) carg1->obj;
    }
    {
      const larcfm::Velocity result_ref =  ((larcfm::Velocity const *)arg1)->Neg();cppresult = new larcfm::Velocity(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Velocity));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Velocity_zeroSmallVs(SwigObj * carg1, double carg2) {
    larcfm::Velocity * cppresult;
    larcfm::Velocity *arg1 = (larcfm::Velocity *) 0 ;
    double arg2 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Velocity *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      const larcfm::Velocity result_ref =  ((larcfm::Velocity const *)arg1)->zeroSmallVs(arg2);cppresult = new larcfm::Velocity(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Velocity));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Velocity_parseXYZ(char * carg1) {
    larcfm::Velocity * cppresult;
    std::string *arg1 = 0 ;
    SwigObj * result;
    
    {
      if (carg1) {
        arg1 = new std::string(carg1);
      }
      else {
        arg1 = new std::string();
        arg1->resize(0);
      }
    }
    {
      const larcfm::Velocity result_ref =  larcfm::Velocity::parseXYZ((std::string const &)*arg1);cppresult = new larcfm::Velocity(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Velocity));
      result->obj = (void*) cppresult;
    }
    {
      if (arg1)
      delete arg1;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Velocity_parse(char * carg1) {
    larcfm::Velocity * cppresult;
    std::string *arg1 = 0 ;
    SwigObj * result;
    
    {
      if (carg1) {
        arg1 = new std::string(carg1);
      }
      else {
        arg1 = new std::string();
        arg1->resize(0);
      }
    }
    {
      const larcfm::Velocity result_ref =  larcfm::Velocity::parse((std::string const &)*arg1);cppresult = new larcfm::Velocity(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Velocity));
      result->obj = (void*) cppresult;
    }
    {
      if (arg1)
      delete arg1;
    }
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_delete_Velocity(SwigObj * carg1) {
    SWIG_remove_registry_entry(carg1);
    SWIG_destroy_object(carg1);
  }
  
  
  SWIGEXPORTC double _wrap_trkgs2vx(double carg1, double carg2) {
    double cppresult;
    double arg1 ;
    double arg2 ;
    double result;
    
    arg1 = (double) carg1;
    arg2 = (double) carg2;
    cppresult =  (double)larcfm::trkgs2vx(arg1,arg2);
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_trkgs2vy(double carg1, double carg2) {
    double cppresult;
    double arg1 ;
    double arg2 ;
    double result;
    
    arg1 = (double) carg1;
    arg2 = (double) carg2;
    cppresult =  (double)larcfm::trkgs2vy(arg1,arg2);
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_trkgs2v(double carg1, double carg2) {
    Vect2 * cppresult;
    double arg1 ;
    double arg2 ;
    SwigObj * result;
    
    arg1 = (double) carg1;
    arg2 = (double) carg2;
    {
      const Vect2 result_ref =  larcfm::trkgs2v(arg1,arg2);cppresult = new Vect2(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(Vect2));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_Interval_low_set(SwigObj * carg1, double carg2) {
    larcfm::Interval *arg1 = (larcfm::Interval *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Interval *) carg1->obj;
    }
    arg2 = (double) carg2;
    if (arg1) (arg1)->low = arg2;
  }
  
  
  SWIGEXPORTC double _wrap_Interval_low_get(SwigObj * carg1) {
    double cppresult;
    larcfm::Interval *arg1 = (larcfm::Interval *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Interval *) carg1->obj;
    }
    cppresult =  (double) ((arg1)->low);
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_Interval_up_set(SwigObj * carg1, double carg2) {
    larcfm::Interval *arg1 = (larcfm::Interval *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Interval *) carg1->obj;
    }
    arg2 = (double) carg2;
    if (arg1) (arg1)->up = arg2;
  }
  
  
  SWIGEXPORTC double _wrap_Interval_up_get(SwigObj * carg1) {
    double cppresult;
    larcfm::Interval *arg1 = (larcfm::Interval *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Interval *) carg1->obj;
    }
    cppresult =  (double) ((arg1)->up);
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Interval_EMPTY_get() {
    const larcfm::Interval * cppresult;
    SwigObj * result;
    
    cppresult =  (larcfm::Interval *)&larcfm::Interval::EMPTY;
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Interval));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_new_Interval_d_d(double carg1, double carg2) {
    double arg1 ;
    double arg2 ;
    SwigObj * result;
    
    arg1 = (double) carg1;
    arg2 = (double) carg2;
    result = SWIG_create_object("larcfm::Interval");
    result->obj = (void*) new larcfm::Interval(arg1,arg2);
    
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_new_Interval() {
    SwigObj * result;
    
    result = SWIG_create_object("larcfm::Interval");
    result->obj = (void*) new larcfm::Interval();
    
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_copy_Interval(SwigObj * carg1) {
    larcfm::Interval *arg1 = 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Interval *) carg1->obj;
      else
      arg1 = (larcfm::Interval *) 0;
    }
    result = SWIG_create_object("larcfm::Interval");
    result->obj = (void*) new larcfm::Interval((larcfm::Interval const &)*arg1);
    
    return result;
  }
  
  
  SWIGEXPORTC bool _wrap_Interval_isEmpty(SwigObj * carg1) {
    bool cppresult;
    larcfm::Interval *arg1 = (larcfm::Interval *) 0 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::Interval *) carg1->obj;
    }
    cppresult =  (bool)((larcfm::Interval const *)arg1)->isEmpty();
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC char * _wrap_Interval_toString_Interval(SwigObj * carg1) {
    std::string* cppresult;
    larcfm::Interval *arg1 = (larcfm::Interval *) 0 ;
    char * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Interval *) carg1->obj;
    }
    {
      const std::string result_ref =  ((larcfm::Interval const *)arg1)->toString();cppresult = new std::string(result_ref);
    }
    {
      const char *str = cppresult->c_str();
      size_t len = strlen(str);
      result = (char *) malloc(len + 1);
      memcpy(result, str, len);
      result[len] = '\0';
    }
    return result;
  }
  
  
  SWIGEXPORTC char * _wrap_Interval_toString_Interval_i(SwigObj * carg1, int carg2) {
    std::string* cppresult;
    larcfm::Interval *arg1 = (larcfm::Interval *) 0 ;
    int arg2 ;
    char * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Interval *) carg1->obj;
    }
    arg2 = (int) carg2;
    {
      const std::string result_ref =  ((larcfm::Interval const *)arg1)->toString(arg2);cppresult = new std::string(result_ref);
    }
    {
      const char *str = cppresult->c_str();
      size_t len = strlen(str);
      result = (char *) malloc(len + 1);
      memcpy(result, str, len);
      result[len] = '\0';
    }
    return result;
  }
  
  
  SWIGEXPORTC char * _wrap_Interval_toStringUnits(SwigObj * carg1, char * carg2) {
    std::string* cppresult;
    larcfm::Interval *arg1 = (larcfm::Interval *) 0 ;
    std::string *arg2 = 0 ;
    char * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Interval *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    {
      const std::string result_ref =  ((larcfm::Interval const *)arg1)->toStringUnits((std::string const &)*arg2);cppresult = new std::string(result_ref);
    }
    {
      const char *str = cppresult->c_str();
      size_t len = strlen(str);
      result = (char *) malloc(len + 1);
      memcpy(result, str, len);
      result[len] = '\0';
    }
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC bool _wrap_Interval_isSingle_Interval(SwigObj * carg1) {
    bool cppresult;
    larcfm::Interval *arg1 = (larcfm::Interval *) 0 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::Interval *) carg1->obj;
    }
    cppresult =  (bool)((larcfm::Interval const *)arg1)->isSingle();
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC bool _wrap_Interval_isSingle_Interval_d(SwigObj * carg1, double carg2) {
    bool cppresult;
    larcfm::Interval *arg1 = (larcfm::Interval *) 0 ;
    double arg2 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::Interval *) carg1->obj;
    }
    arg2 = (double) carg2;
    cppresult =  (bool)((larcfm::Interval const *)arg1)->isSingle(arg2);
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC bool _wrap_Interval_in(SwigObj * carg1, double carg2) {
    bool cppresult;
    larcfm::Interval *arg1 = (larcfm::Interval *) 0 ;
    double arg2 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::Interval *) carg1->obj;
    }
    arg2 = (double) carg2;
    cppresult =  (bool)((larcfm::Interval const *)arg1)->in(arg2);
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC bool _wrap_Interval_inCC(SwigObj * carg1, double carg2) {
    bool cppresult;
    larcfm::Interval *arg1 = (larcfm::Interval *) 0 ;
    double arg2 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::Interval *) carg1->obj;
    }
    arg2 = (double) carg2;
    cppresult =  (bool)((larcfm::Interval const *)arg1)->inCC(arg2);
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC bool _wrap_Interval_inCO(SwigObj * carg1, double carg2) {
    bool cppresult;
    larcfm::Interval *arg1 = (larcfm::Interval *) 0 ;
    double arg2 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::Interval *) carg1->obj;
    }
    arg2 = (double) carg2;
    cppresult =  (bool)((larcfm::Interval const *)arg1)->inCO(arg2);
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC bool _wrap_Interval_inOC(SwigObj * carg1, double carg2) {
    bool cppresult;
    larcfm::Interval *arg1 = (larcfm::Interval *) 0 ;
    double arg2 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::Interval *) carg1->obj;
    }
    arg2 = (double) carg2;
    cppresult =  (bool)((larcfm::Interval const *)arg1)->inOC(arg2);
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC bool _wrap_Interval_inOO(SwigObj * carg1, double carg2) {
    bool cppresult;
    larcfm::Interval *arg1 = (larcfm::Interval *) 0 ;
    double arg2 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::Interval *) carg1->obj;
    }
    arg2 = (double) carg2;
    cppresult =  (bool)((larcfm::Interval const *)arg1)->inOO(arg2);
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC bool _wrap_Interval_overlap(SwigObj * carg1, SwigObj * carg2) {
    bool cppresult;
    larcfm::Interval *arg1 = (larcfm::Interval *) 0 ;
    larcfm::Interval *arg2 = 0 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::Interval *) carg1->obj;
    }
    {
      if (carg2)
      arg2 = (larcfm::Interval *) carg2->obj;
      else
      arg2 = (larcfm::Interval *) 0;
    }
    cppresult =  (bool)((larcfm::Interval const *)arg1)->overlap((larcfm::Interval const &)*arg2);
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Interval_intersect(SwigObj * carg1, SwigObj * carg2) {
    larcfm::Interval * cppresult;
    larcfm::Interval *arg1 = (larcfm::Interval *) 0 ;
    larcfm::Interval *arg2 = 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Interval *) carg1->obj;
    }
    {
      if (carg2)
      arg2 = (larcfm::Interval *) carg2->obj;
      else
      arg2 = (larcfm::Interval *) 0;
    }
    {
      const larcfm::Interval result_ref =  ((larcfm::Interval const *)arg1)->intersect((larcfm::Interval const &)*arg2);cppresult = new larcfm::Interval(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Interval));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC char * _wrap_Interval_toPVS(SwigObj * carg1, int carg2) {
    std::string* cppresult;
    larcfm::Interval *arg1 = (larcfm::Interval *) 0 ;
    int arg2 ;
    char * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Interval *) carg1->obj;
    }
    arg2 = (int) carg2;
    {
      const std::string result_ref =  ((larcfm::Interval const *)arg1)->toPVS(arg2);cppresult = new std::string(result_ref);
    }
    {
      const char *str = cppresult->c_str();
      size_t len = strlen(str);
      result = (char *) malloc(len + 1);
      memcpy(result, str, len);
      result[len] = '\0';
    }
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_delete_Interval(SwigObj * carg1) {
    SWIG_remove_registry_entry(carg1);
    SWIG_destroy_object(carg1);
  }
  
  
  SWIGEXPORTC char * _wrap_BandsRegion_to_string(int carg1) {
    std::string* cppresult;
    larcfm::BandsRegion::Region arg1 ;
    char * result;
    
    arg1 = (larcfm::BandsRegion::Region) carg1;
    {
      const std::string result_ref =  larcfm::BandsRegion::to_string(arg1);cppresult = new std::string(result_ref);
    }
    {
      const char *str = cppresult->c_str();
      size_t len = strlen(str);
      result = (char *) malloc(len + 1);
      memcpy(result, str, len);
      result[len] = '\0';
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_new_BandsRegion() {
    SwigObj * result;
    
    result = SWIG_create_object("larcfm::BandsRegion");
    result->obj = (void*) new larcfm::BandsRegion();
    
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_delete_BandsRegion(SwigObj * carg1) {
    SWIG_remove_registry_entry(carg1);
    SWIG_destroy_object(carg1);
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_trk_band_set(SwigObj * carg1, SwigObj * carg2) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    KinematicTrkBands arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      arg2 = *(KinematicTrkBands *) (carg2->obj);
    }
    if (arg1) (arg1)->trk_band = arg2;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_KinematicBands_trk_band_get(SwigObj * carg1) {
    KinematicTrkBands * cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      const KinematicTrkBands result_ref =  ((arg1)->trk_band);cppresult = new KinematicTrkBands(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(KinematicTrkBands));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_gs_band_set(SwigObj * carg1, SwigObj * carg2) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    KinematicGsBands arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      arg2 = *(KinematicGsBands *) (carg2->obj);
    }
    if (arg1) (arg1)->gs_band = arg2;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_KinematicBands_gs_band_get(SwigObj * carg1) {
    KinematicGsBands * cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      const KinematicGsBands result_ref =  ((arg1)->gs_band);cppresult = new KinematicGsBands(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(KinematicGsBands));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_vs_band_set(SwigObj * carg1, SwigObj * carg2) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    KinematicVsBands arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      arg2 = *(KinematicVsBands *) (carg2->obj);
    }
    if (arg1) (arg1)->vs_band = arg2;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_KinematicBands_vs_band_get(SwigObj * carg1) {
    KinematicVsBands * cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      const KinematicVsBands result_ref =  ((arg1)->vs_band);cppresult = new KinematicVsBands(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(KinematicVsBands));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_alt_band_set(SwigObj * carg1, SwigObj * carg2) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    KinematicAltBands arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      arg2 = *(KinematicAltBands *) (carg2->obj);
    }
    if (arg1) (arg1)->alt_band = arg2;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_KinematicBands_alt_band_get(SwigObj * carg1) {
    KinematicAltBands * cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      const KinematicAltBands result_ref =  ((arg1)->alt_band);cppresult = new KinematicAltBands(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(KinematicAltBands));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_new_KinematicBands_pcDetection3D(SwigObj * carg1) {
    Detection3D *arg1 = (Detection3D *) 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (Detection3D *) carg1->obj;
    }
    result = SWIG_create_object("larcfm::KinematicBands");
    result->obj = (void*) new larcfm::KinematicBands((Detection3D const *)arg1);
    
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_new_KinematicBands() {
    SwigObj * result;
    
    result = SWIG_create_object("larcfm::KinematicBands");
    result->obj = (void*) new larcfm::KinematicBands();
    
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_copy_KinematicBands(SwigObj * carg1) {
    larcfm::KinematicBands *arg1 = 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
      else
      arg1 = (larcfm::KinematicBands *) 0;
    }
    result = SWIG_create_object("larcfm::KinematicBands");
    result->obj = (void*) new larcfm::KinematicBands((larcfm::KinematicBands const &)*arg1);
    
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_KinematicBands_getOwnship(SwigObj * carg1) {
    OwnshipState * cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      const OwnshipState result_ref =  ((larcfm::KinematicBands const *)arg1)->getOwnship();cppresult = new OwnshipState(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(OwnshipState));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setOwnship_KinematicBands_OwnshipState(SwigObj * carg1, SwigObj * carg2) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    OwnshipState arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      arg2 = *(OwnshipState *) (carg2->obj);
    }
    (arg1)->setOwnship(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setOwnship_KinematicBands_s_Position_Velocity(SwigObj * carg1, char * carg2, SwigObj * carg3, SwigObj * carg4) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    std::string *arg2 = 0 ;
    larcfm::Position *arg3 = 0 ;
    larcfm::Velocity *arg4 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    {
      if (carg3)
      arg3 = (larcfm::Position *) carg3->obj;
      else
      arg3 = (larcfm::Position *) 0;
    }
    {
      if (carg4)
      arg4 = (larcfm::Velocity *) carg4->obj;
      else
      arg4 = (larcfm::Velocity *) 0;
    }
    (arg1)->setOwnship((std::string const &)*arg2,(larcfm::Position const &)*arg3,(larcfm::Velocity const &)*arg4);
    {
      if (arg2)
      delete arg2;
    }
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setOwnship_KinematicBands_Position_Velocity(SwigObj * carg1, SwigObj * carg2, SwigObj * carg3) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    larcfm::Position *arg2 = 0 ;
    larcfm::Velocity *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      if (carg2)
      arg2 = (larcfm::Position *) carg2->obj;
      else
      arg2 = (larcfm::Position *) 0;
    }
    {
      if (carg3)
      arg3 = (larcfm::Velocity *) carg3->obj;
      else
      arg3 = (larcfm::Velocity *) 0;
    }
    (arg1)->setOwnship((larcfm::Position const &)*arg2,(larcfm::Velocity const &)*arg3);
  }
  
  
  SWIGEXPORTC int _wrap_KinematicBands_trafficSize(SwigObj * carg1) {
    int cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    int result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (int)((larcfm::KinematicBands const *)arg1)->trafficSize();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_KinematicBands_getTraffic_KinematicBands_i(SwigObj * carg1, int carg2) {
    TrafficState * cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    int arg2 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (int) carg2;
    {
      const TrafficState result_ref =  ((larcfm::KinematicBands const *)arg1)->getTraffic(arg2);cppresult = new TrafficState(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(TrafficState));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_KinematicBands_getTraffic_KinematicBands_s(SwigObj * carg1, char * carg2) {
    TrafficState * cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    std::string arg2 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      if (carg2) {
        (&arg2)->assign(carg2);
      }
      else {
        (&arg2)->resize(0);
      }
    }
    {
      const TrafficState result_ref =  ((larcfm::KinematicBands const *)arg1)->getTraffic(arg2);cppresult = new TrafficState(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(TrafficState));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_KinematicBands_getTraffic_KinematicBands(SwigObj * carg1) {
    std::vector< TrafficState > * cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      const std::vector< TrafficState > result_ref =  ((larcfm::KinematicBands const *)arg1)->getTraffic();cppresult = new std::vector< TrafficState >(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(std::vector< TrafficState >));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC bool _wrap_KinematicBands_hasOwnship(SwigObj * carg1) {
    bool cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (bool)((larcfm::KinematicBands const *)arg1)->hasOwnship();
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC bool _wrap_KinematicBands_hasTraffic(SwigObj * carg1) {
    bool cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (bool)((larcfm::KinematicBands const *)arg1)->hasTraffic();
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_addTraffic_KinematicBands_TrafficState(SwigObj * carg1, SwigObj * carg2) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    TrafficState *arg2 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      if (carg2)
      arg2 = (TrafficState *) carg2->obj;
      else
      arg2 = (TrafficState *) 0;
    }
    (arg1)->addTraffic((TrafficState const &)*arg2);
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_addTraffic_KinematicBands_s_Position_Velocity(SwigObj * carg1, char * carg2, SwigObj * carg3, SwigObj * carg4) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    std::string *arg2 = 0 ;
    larcfm::Position *arg3 = 0 ;
    larcfm::Velocity *arg4 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    {
      if (carg3)
      arg3 = (larcfm::Position *) carg3->obj;
      else
      arg3 = (larcfm::Position *) 0;
    }
    {
      if (carg4)
      arg4 = (larcfm::Velocity *) carg4->obj;
      else
      arg4 = (larcfm::Velocity *) 0;
    }
    (arg1)->addTraffic((std::string const &)*arg2,(larcfm::Position const &)*arg3,(larcfm::Velocity const &)*arg4);
    {
      if (arg2)
      delete arg2;
    }
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_addTraffic_KinematicBands_Position_Velocity(SwigObj * carg1, SwigObj * carg2, SwigObj * carg3) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    larcfm::Position *arg2 = 0 ;
    larcfm::Velocity *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      if (carg2)
      arg2 = (larcfm::Position *) carg2->obj;
      else
      arg2 = (larcfm::Position *) 0;
    }
    {
      if (carg3)
      arg3 = (larcfm::Velocity *) carg3->obj;
      else
      arg3 = (larcfm::Velocity *) 0;
    }
    (arg1)->addTraffic((larcfm::Position const &)*arg2,(larcfm::Velocity const &)*arg3);
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setParameters(SwigObj * carg1, SwigObj * carg2) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    DaidalusParameters *arg2 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      if (carg2)
      arg2 = (DaidalusParameters *) carg2->obj;
      else
      arg2 = (DaidalusParameters *) 0;
    }
    (arg1)->setParameters((DaidalusParameters const &)*arg2);
  }
  
  
  SWIGEXPORTC bool _wrap_KinematicBands_isEnabledImplicitBands(SwigObj * carg1) {
    bool cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (bool)(arg1)->isEnabledImplicitBands();
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setImplicitBands(SwigObj * carg1, bool carg2) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    bool arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (bool) carg2;
    (arg1)->setImplicitBands(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_enableImplicitBands(SwigObj * carg1) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    (arg1)->enableImplicitBands();
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_disableImplicitBands(SwigObj * carg1) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    (arg1)->disableImplicitBands();
  }
  
  
  SWIGEXPORTC double _wrap_KinematicBands_getLookaheadTime_KinematicBands(SwigObj * carg1) {
    double cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (double)((larcfm::KinematicBands const *)arg1)->getLookaheadTime();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_KinematicBands_getLookaheadTime_KinematicBands_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::KinematicBands const *)arg1)->getLookaheadTime((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setLookaheadTime_KinematicBands_d(SwigObj * carg1, double carg2) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setLookaheadTime(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setLookaheadTime_KinematicBands_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setLookaheadTime(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC double _wrap_KinematicBands_getAlertingTime(SwigObj * carg1) {
    double cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (double)((larcfm::KinematicBands const *)arg1)->getAlertingTime();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setAlertingTime(SwigObj * carg1, double carg2) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setAlertingTime(arg2);
  }
  
  
  SWIGEXPORTC double _wrap_KinematicBands_getMaxRecoveryTime(SwigObj * carg1) {
    double cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (double)((larcfm::KinematicBands const *)arg1)->getMaxRecoveryTime();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setMaxRecoveryTime(SwigObj * carg1, double carg2) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setMaxRecoveryTime(arg2);
  }
  
  
  SWIGEXPORTC double _wrap_KinematicBands_getRecoveryStabilityTime(SwigObj * carg1) {
    double cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (double)((larcfm::KinematicBands const *)arg1)->getRecoveryStabilityTime();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setRecoveryStabilityTime(SwigObj * carg1, double carg2) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setRecoveryStabilityTime(arg2);
  }
  
  
  SWIGEXPORTC double _wrap_KinematicBands_getMinHorizontalRecovery_KinematicBands(SwigObj * carg1) {
    double cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (double)((larcfm::KinematicBands const *)arg1)->getMinHorizontalRecovery();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_KinematicBands_getMinHorizontalRecovery_KinematicBands_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::KinematicBands const *)arg1)->getMinHorizontalRecovery((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setMinHorizontalRecovery_KinematicBands_d(SwigObj * carg1, double carg2) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setMinHorizontalRecovery(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setMinHorizontalRecovery_KinematicBands_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setMinHorizontalRecovery(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC double _wrap_KinematicBands_getMinVerticalRecovery_KinematicBands(SwigObj * carg1) {
    double cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (double)((larcfm::KinematicBands const *)arg1)->getMinVerticalRecovery();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_KinematicBands_getMinVerticalRecovery_KinematicBands_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::KinematicBands const *)arg1)->getMinVerticalRecovery((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setMinVerticalRecovery_KinematicBands_d(SwigObj * carg1, double carg2) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setMinVerticalRecovery(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setMinVerticalRecovery_KinematicBands_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setMinVerticalRecovery(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC bool _wrap_KinematicBands_isEnabledCollisionAvoidanceBands(SwigObj * carg1) {
    bool cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (bool)((larcfm::KinematicBands const *)arg1)->isEnabledCollisionAvoidanceBands();
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setCollisionAvoidanceBands(SwigObj * carg1, bool carg2) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    bool arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (bool) carg2;
    (arg1)->setCollisionAvoidanceBands(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_enableCollisionAvoidanceBands(SwigObj * carg1) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    (arg1)->enableCollisionAvoidanceBands();
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_disableCollisionAvoidanceBands(SwigObj * carg1) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    (arg1)->disableCollisionAvoidanceBands();
  }
  
  
  SWIGEXPORTC char * _wrap_KinematicBands_getCriteriaAircraft(SwigObj * carg1) {
    std::string* cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    char * result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      const std::string result_ref =  ((larcfm::KinematicBands const *)arg1)->getCriteriaAircraft();cppresult = new std::string(result_ref);
    }
    {
      const char *str = cppresult->c_str();
      size_t len = strlen(str);
      result = (char *) malloc(len + 1);
      memcpy(result, str, len);
      result[len] = '\0';
    }
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setCriteriaAircraft_KinematicBands_s(SwigObj * carg1, char * carg2) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    std::string *arg2 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    (arg1)->setCriteriaAircraft((std::string const &)*arg2);
    {
      if (arg2)
      delete arg2;
    }
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setCriteriaAircraft_KinematicBands_pUrgencyStrategy(SwigObj * carg1, SwigObj * carg2) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    UrgencyStrategy *arg2 = (UrgencyStrategy *) 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      if (carg2)
      arg2 = (UrgencyStrategy *) carg2->obj;
    }
    (arg1)->setCriteriaAircraft(arg2);
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_KinematicBands_mostUrgentAircraft(SwigObj * carg1, SwigObj * carg2) {
    TrafficState * cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    UrgencyStrategy *arg2 = (UrgencyStrategy *) 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      if (carg2)
      arg2 = (UrgencyStrategy *) carg2->obj;
    }
    {
      const TrafficState result_ref =  (arg1)->mostUrgentAircraft(arg2);cppresult = new TrafficState(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(TrafficState));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC bool _wrap_KinematicBands_isEnabledConflictCriteria(SwigObj * carg1) {
    bool cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (bool)((larcfm::KinematicBands const *)arg1)->isEnabledConflictCriteria();
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setConflictCriteria(SwigObj * carg1, bool carg2) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    bool arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (bool) carg2;
    (arg1)->setConflictCriteria(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_enableConflictCriteria(SwigObj * carg1) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    (arg1)->enableConflictCriteria();
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_disableConflictCriteria(SwigObj * carg1) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    (arg1)->disableConflictCriteria();
  }
  
  
  SWIGEXPORTC bool _wrap_KinematicBands_isEnabledRecoveryCriteria(SwigObj * carg1) {
    bool cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (bool)((larcfm::KinematicBands const *)arg1)->isEnabledRecoveryCriteria();
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setRecoveryCriteria(SwigObj * carg1, bool carg2) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    bool arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (bool) carg2;
    (arg1)->setRecoveryCriteria(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_enableRecoveryCriteria(SwigObj * carg1) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    (arg1)->enableRecoveryCriteria();
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_disableRecoveryCriteria(SwigObj * carg1) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    (arg1)->disableRecoveryCriteria();
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setRepulsiveCriteria(SwigObj * carg1, bool carg2) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    bool arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (bool) carg2;
    (arg1)->setRepulsiveCriteria(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_enableRepulsiveCriteria(SwigObj * carg1) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    (arg1)->enableRepulsiveCriteria();
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_disableRepulsiveCriteria(SwigObj * carg1) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    (arg1)->disableRepulsiveCriteria();
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setRecoveryBands(SwigObj * carg1, bool carg2) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    bool arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (bool) carg2;
    (arg1)->setRecoveryBands(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_enableRecoveryBands(SwigObj * carg1) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    (arg1)->enableRecoveryBands();
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_disableRecoveryBands(SwigObj * carg1) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    (arg1)->disableRecoveryBands();
  }
  
  
  SWIGEXPORTC double _wrap_KinematicBands_getTrackStep_KinematicBands(SwigObj * carg1) {
    double cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (double)((larcfm::KinematicBands const *)arg1)->getTrackStep();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_KinematicBands_getTrackStep_KinematicBands_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::KinematicBands const *)arg1)->getTrackStep((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setTrackStep_KinematicBands_d(SwigObj * carg1, double carg2) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setTrackStep(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setTrackStep_KinematicBands_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setTrackStep(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC double _wrap_KinematicBands_getBankAngle_KinematicBands(SwigObj * carg1) {
    double cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (double)((larcfm::KinematicBands const *)arg1)->getBankAngle();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_KinematicBands_getBankAngle_KinematicBands_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::KinematicBands const *)arg1)->getBankAngle((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setBankAngle_KinematicBands_d(SwigObj * carg1, double carg2) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setBankAngle(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setBankAngle_KinematicBands_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setBankAngle(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC double _wrap_KinematicBands_getTurnRate_KinematicBands(SwigObj * carg1) {
    double cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (double)((larcfm::KinematicBands const *)arg1)->getTurnRate();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_KinematicBands_getTurnRate_KinematicBands_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::KinematicBands const *)arg1)->getTurnRate((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setTurnRate_KinematicBands_d(SwigObj * carg1, double carg2) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setTurnRate(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setTurnRate_KinematicBands_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setTurnRate(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC bool _wrap_KinematicBands_isEnabledRecoveryTrackBands(SwigObj * carg1) {
    bool cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (bool)((larcfm::KinematicBands const *)arg1)->isEnabledRecoveryTrackBands();
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setRecoveryTrackBands(SwigObj * carg1, bool carg2) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    bool arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (bool) carg2;
    (arg1)->setRecoveryTrackBands(arg2);
  }
  
  
  SWIGEXPORTC double _wrap_KinematicBands_getMinGroundSpeed_KinematicBands(SwigObj * carg1) {
    double cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (double)((larcfm::KinematicBands const *)arg1)->getMinGroundSpeed();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_KinematicBands_getMinGroundSpeed_KinematicBands_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::KinematicBands const *)arg1)->getMinGroundSpeed((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setMinGroundSpeed_KinematicBands_d(SwigObj * carg1, double carg2) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setMinGroundSpeed(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setMinGroundSpeed_KinematicBands_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setMinGroundSpeed(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC double _wrap_KinematicBands_getMaxGroundSpeed_KinematicBands(SwigObj * carg1) {
    double cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (double)((larcfm::KinematicBands const *)arg1)->getMaxGroundSpeed();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_KinematicBands_getMaxGroundSpeed_KinematicBands_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::KinematicBands const *)arg1)->getMaxGroundSpeed((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setMaxGroundSpeed_KinematicBands_d(SwigObj * carg1, double carg2) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setMaxGroundSpeed(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setMaxGroundSpeed_KinematicBands_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setMaxGroundSpeed(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC double _wrap_KinematicBands_getGroundSpeedStep_KinematicBands(SwigObj * carg1) {
    double cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (double)((larcfm::KinematicBands const *)arg1)->getGroundSpeedStep();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_KinematicBands_getGroundSpeedStep_KinematicBands_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::KinematicBands const *)arg1)->getGroundSpeedStep((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setGroundSpeedStep_KinematicBands_d(SwigObj * carg1, double carg2) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setGroundSpeedStep(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setGroundSpeedStep_KinematicBands_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setGroundSpeedStep(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC double _wrap_KinematicBands_getHorizontalAcceleration_KinematicBands(SwigObj * carg1) {
    double cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (double)((larcfm::KinematicBands const *)arg1)->getHorizontalAcceleration();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_KinematicBands_getHorizontalAcceleration_KinematicBands_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::KinematicBands const *)arg1)->getHorizontalAcceleration((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setHorizontalAcceleration_KinematicBands_d(SwigObj * carg1, double carg2) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setHorizontalAcceleration(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setHorizontalAcceleration_KinematicBands_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setHorizontalAcceleration(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC bool _wrap_KinematicBands_isEnabledRecoveryGroundSpeedBands(SwigObj * carg1) {
    bool cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (bool)(arg1)->isEnabledRecoveryGroundSpeedBands();
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setRecoveryGroundSpeedBands(SwigObj * carg1, bool carg2) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    bool arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (bool) carg2;
    (arg1)->setRecoveryGroundSpeedBands(arg2);
  }
  
  
  SWIGEXPORTC double _wrap_KinematicBands_getMinVerticalSpeed_KinematicBands(SwigObj * carg1) {
    double cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (double)((larcfm::KinematicBands const *)arg1)->getMinVerticalSpeed();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_KinematicBands_getMinVerticalSpeed_KinematicBands_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::KinematicBands const *)arg1)->getMinVerticalSpeed((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setMinVerticalSpeed_KinematicBands_d(SwigObj * carg1, double carg2) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setMinVerticalSpeed(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setMinVerticalSpeed_KinematicBands_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setMinVerticalSpeed(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC double _wrap_KinematicBands_getMaxVerticalSpeed_KinematicBands(SwigObj * carg1) {
    double cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (double)((larcfm::KinematicBands const *)arg1)->getMaxVerticalSpeed();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_KinematicBands_getMaxVerticalSpeed_KinematicBands_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::KinematicBands const *)arg1)->getMaxVerticalSpeed((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setMaxVerticalSpeed_KinematicBands_d(SwigObj * carg1, double carg2) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setMaxVerticalSpeed(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setMaxVerticalSpeed_KinematicBands_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setMaxVerticalSpeed(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC double _wrap_KinematicBands_getVerticalSpeedStep_KinematicBands(SwigObj * carg1) {
    double cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (double)((larcfm::KinematicBands const *)arg1)->getVerticalSpeedStep();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_KinematicBands_getVerticalSpeedStep_KinematicBands_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::KinematicBands const *)arg1)->getVerticalSpeedStep((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setVerticalSpeedStep_KinematicBands_d(SwigObj * carg1, double carg2) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setVerticalSpeedStep(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setVerticalSpeedStep_KinematicBands_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setVerticalSpeedStep(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC double _wrap_KinematicBands_getVerticalAcceleration_KinematicBands(SwigObj * carg1) {
    double cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (double)((larcfm::KinematicBands const *)arg1)->getVerticalAcceleration();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_KinematicBands_getVerticalAcceleration_KinematicBands_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::KinematicBands const *)arg1)->getVerticalAcceleration((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setVerticalAcceleration_KinematicBands_d(SwigObj * carg1, double carg2) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setVerticalAcceleration(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setVerticalAcceleration_KinematicBands_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setVerticalAcceleration(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC bool _wrap_KinematicBands_isEnabledRecoveryVerticalSpeedBands(SwigObj * carg1) {
    bool cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (bool)(arg1)->isEnabledRecoveryVerticalSpeedBands();
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setRecoveryVerticalSpeedBands(SwigObj * carg1, bool carg2) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    bool arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (bool) carg2;
    (arg1)->setRecoveryVerticalSpeedBands(arg2);
  }
  
  
  SWIGEXPORTC double _wrap_KinematicBands_getMinAltitude_KinematicBands(SwigObj * carg1) {
    double cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (double)((larcfm::KinematicBands const *)arg1)->getMinAltitude();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_KinematicBands_getMinAltitude_KinematicBands_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::KinematicBands const *)arg1)->getMinAltitude((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setMinAltitude_KinematicBands_d(SwigObj * carg1, double carg2) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setMinAltitude(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setMinAltitude_KinematicBands_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setMinAltitude(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC double _wrap_KinematicBands_getMaxAltitude_KinematicBands(SwigObj * carg1) {
    double cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (double)((larcfm::KinematicBands const *)arg1)->getMaxAltitude();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_KinematicBands_getMaxAltitude_KinematicBands_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::KinematicBands const *)arg1)->getMaxAltitude((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setMaxAltitude_KinematicBands_d(SwigObj * carg1, double carg2) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setMaxAltitude(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setMaxAltitude_KinematicBands_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setMaxAltitude(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC double _wrap_KinematicBands_getAltitudeStep_KinematicBands(SwigObj * carg1) {
    double cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (double)((larcfm::KinematicBands const *)arg1)->getAltitudeStep();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_KinematicBands_getAltitudeStep_KinematicBands_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::KinematicBands const *)arg1)->getAltitudeStep((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setAltitudeStep_KinematicBands_d(SwigObj * carg1, double carg2) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setAltitudeStep(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setAltitudeStep_KinematicBands_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setAltitudeStep(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC double _wrap_KinematicBands_getVerticalRate_KinematicBands(SwigObj * carg1) {
    double cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (double)((larcfm::KinematicBands const *)arg1)->getVerticalRate();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_KinematicBands_getVerticalRate_KinematicBands_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::KinematicBands const *)arg1)->getVerticalRate((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setVerticalRate_KinematicBands_d(SwigObj * carg1, double carg2) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setVerticalRate(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setVerticalRate_KinematicBands_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setVerticalRate(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_clear(SwigObj * carg1) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    (arg1)->clear();
  }
  
  
  SWIGEXPORTC int _wrap_KinematicBands_trackLength(SwigObj * carg1) {
    int cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    int result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (int)(arg1)->trackLength();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_forceTrackBandsComputation(SwigObj * carg1) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    (arg1)->forceTrackBandsComputation();
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_KinematicBands_track(SwigObj * carg1, int carg2, char * carg3) {
    larcfm::Interval * cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    int arg2 ;
    std::string *arg3 = 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (int) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    {
      const larcfm::Interval result_ref =  (arg1)->track(arg2,(std::string const &)*arg3);cppresult = new larcfm::Interval(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Interval));
      result->obj = (void*) cppresult;
    }
    {
      if (arg3)
      delete arg3;
    }
    return result;
  }
  
  
  SWIGEXPORTC int _wrap_KinematicBands_trackRegion(SwigObj * carg1, int carg2) {
    int cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    int arg2 ;
    int result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (int) carg2;
    cppresult = (int) (larcfm::BandsRegion::Region)(arg1)->trackRegion(arg2);
    result = (int) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC int _wrap_KinematicBands_trackRegionOf(SwigObj * carg1, double carg2, char * carg3) {
    int cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    int result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    cppresult = (int) (larcfm::BandsRegion::Region)(arg1)->trackRegionOf(arg2,(std::string const &)*arg3);
    result = (int) cppresult;
    {
      if (arg3)
      delete arg3;
    }
    return result;
  }
  
  
  SWIGEXPORTC bool _wrap_KinematicBands_nearTrackConflict_KinematicBands_d_d(SwigObj * carg1, double carg2, double carg3) {
    bool cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    double arg3 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    arg3 = (double) carg3;
    cppresult =  (bool)(arg1)->nearTrackConflict(arg2,arg3);
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC bool _wrap_KinematicBands_nearTrackConflict_KinematicBands_d_d_s(SwigObj * carg1, double carg2, double carg3, char * carg4) {
    bool cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    double arg3 ;
    std::string arg4 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    arg3 = (double) carg3;
    {
      if (carg4) {
        (&arg4)->assign(carg4);
      }
      else {
        (&arg4)->resize(0);
      }
    }
    cppresult =  (bool)(arg1)->nearTrackConflict(arg2,arg3,arg4);
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_KinematicBands_trackRecoveryTime(SwigObj * carg1) {
    double cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (double)(arg1)->trackRecoveryTime();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC int _wrap_KinematicBands_groundSpeedLength(SwigObj * carg1) {
    int cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    int result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (int)(arg1)->groundSpeedLength();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_forceGroundSpeedBandsComputation(SwigObj * carg1) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    (arg1)->forceGroundSpeedBandsComputation();
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_KinematicBands_groundSpeed(SwigObj * carg1, int carg2, char * carg3) {
    larcfm::Interval * cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    int arg2 ;
    std::string *arg3 = 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (int) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    {
      const larcfm::Interval result_ref =  (arg1)->groundSpeed(arg2,(std::string const &)*arg3);cppresult = new larcfm::Interval(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Interval));
      result->obj = (void*) cppresult;
    }
    {
      if (arg3)
      delete arg3;
    }
    return result;
  }
  
  
  SWIGEXPORTC int _wrap_KinematicBands_groundSpeedRegion(SwigObj * carg1, int carg2) {
    int cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    int arg2 ;
    int result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (int) carg2;
    cppresult = (int) (larcfm::BandsRegion::Region)(arg1)->groundSpeedRegion(arg2);
    result = (int) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC int _wrap_KinematicBands_groundSpeedRegionOf(SwigObj * carg1, double carg2, char * carg3) {
    int cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    int result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    cppresult = (int) (larcfm::BandsRegion::Region)(arg1)->groundSpeedRegionOf(arg2,(std::string const &)*arg3);
    result = (int) cppresult;
    {
      if (arg3)
      delete arg3;
    }
    return result;
  }
  
  
  SWIGEXPORTC bool _wrap_KinematicBands_nearGroundSpeedConflict_KinematicBands_d_d(SwigObj * carg1, double carg2, double carg3) {
    bool cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    double arg3 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    arg3 = (double) carg3;
    cppresult =  (bool)(arg1)->nearGroundSpeedConflict(arg2,arg3);
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC bool _wrap_KinematicBands_nearGroundSpeedConflict_KinematicBands_d_d_s(SwigObj * carg1, double carg2, double carg3, char * carg4) {
    bool cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    double arg3 ;
    std::string arg4 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    arg3 = (double) carg3;
    {
      if (carg4) {
        (&arg4)->assign(carg4);
      }
      else {
        (&arg4)->resize(0);
      }
    }
    cppresult =  (bool)(arg1)->nearGroundSpeedConflict(arg2,arg3,arg4);
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_KinematicBands_groundSpeedRecoveryTime(SwigObj * carg1) {
    double cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (double)(arg1)->groundSpeedRecoveryTime();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC int _wrap_KinematicBands_verticalSpeedLength(SwigObj * carg1) {
    int cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    int result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (int)(arg1)->verticalSpeedLength();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_forceVerticalSpeedBandsComputation(SwigObj * carg1) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    (arg1)->forceVerticalSpeedBandsComputation();
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_KinematicBands_verticalSpeed(SwigObj * carg1, int carg2, char * carg3) {
    larcfm::Interval * cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    int arg2 ;
    std::string *arg3 = 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (int) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    {
      const larcfm::Interval result_ref =  (arg1)->verticalSpeed(arg2,(std::string const &)*arg3);cppresult = new larcfm::Interval(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Interval));
      result->obj = (void*) cppresult;
    }
    {
      if (arg3)
      delete arg3;
    }
    return result;
  }
  
  
  SWIGEXPORTC int _wrap_KinematicBands_verticalSpeedRegion(SwigObj * carg1, int carg2) {
    int cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    int arg2 ;
    int result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (int) carg2;
    cppresult = (int) (larcfm::BandsRegion::Region)(arg1)->verticalSpeedRegion(arg2);
    result = (int) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC int _wrap_KinematicBands_verticalSpeedRegionOf(SwigObj * carg1, double carg2, char * carg3) {
    int cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    int result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    cppresult = (int) (larcfm::BandsRegion::Region)(arg1)->verticalSpeedRegionOf(arg2,(std::string const &)*arg3);
    result = (int) cppresult;
    {
      if (arg3)
      delete arg3;
    }
    return result;
  }
  
  
  SWIGEXPORTC bool _wrap_KinematicBands_nearVerticalSpeedConflict_KinematicBands_d_d(SwigObj * carg1, double carg2, double carg3) {
    bool cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    double arg3 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    arg3 = (double) carg3;
    cppresult =  (bool)(arg1)->nearVerticalSpeedConflict(arg2,arg3);
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC bool _wrap_KinematicBands_nearVerticalSpeedConflict_KinematicBands_d_d_s(SwigObj * carg1, double carg2, double carg3, char * carg4) {
    bool cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    double arg3 ;
    std::string arg4 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    arg3 = (double) carg3;
    {
      if (carg4) {
        (&arg4)->assign(carg4);
      }
      else {
        (&arg4)->resize(0);
      }
    }
    cppresult =  (bool)(arg1)->nearVerticalSpeedConflict(arg2,arg3,arg4);
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_KinematicBands_verticalSpeedRecoveryTime(SwigObj * carg1) {
    double cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (double)(arg1)->verticalSpeedRecoveryTime();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC int _wrap_KinematicBands_altitudeLength(SwigObj * carg1) {
    int cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    int result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (int)(arg1)->altitudeLength();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_forceAltitudeBandsComputation(SwigObj * carg1) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    (arg1)->forceAltitudeBandsComputation();
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_KinematicBands_altitude(SwigObj * carg1, int carg2, char * carg3) {
    larcfm::Interval * cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    int arg2 ;
    std::string *arg3 = 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (int) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    {
      const larcfm::Interval result_ref =  (arg1)->altitude(arg2,(std::string const &)*arg3);cppresult = new larcfm::Interval(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Interval));
      result->obj = (void*) cppresult;
    }
    {
      if (arg3)
      delete arg3;
    }
    return result;
  }
  
  
  SWIGEXPORTC int _wrap_KinematicBands_altitudeRegion(SwigObj * carg1, int carg2) {
    int cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    int arg2 ;
    int result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (int) carg2;
    cppresult = (int) (larcfm::BandsRegion::Region)(arg1)->altitudeRegion(arg2);
    result = (int) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC int _wrap_KinematicBands_altitudeRegionOf(SwigObj * carg1, double carg2, char * carg3) {
    int cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    int result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    cppresult = (int) (larcfm::BandsRegion::Region)(arg1)->altitudeRegionOf(arg2,(std::string const &)*arg3);
    result = (int) cppresult;
    {
      if (arg3)
      delete arg3;
    }
    return result;
  }
  
  
  SWIGEXPORTC bool _wrap_KinematicBands_nearAltitudeConflict_KinematicBands_d_d(SwigObj * carg1, double carg2, double carg3) {
    bool cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    double arg3 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    arg3 = (double) carg3;
    cppresult =  (bool)(arg1)->nearAltitudeConflict(arg2,arg3);
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC bool _wrap_KinematicBands_nearAltitudeConflict_KinematicBands_d_d_s(SwigObj * carg1, double carg2, double carg3, char * carg4) {
    bool cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    double arg3 ;
    std::string arg4 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    arg3 = (double) carg3;
    {
      if (carg4) {
        (&arg4)->assign(carg4);
      }
      else {
        (&arg4)->resize(0);
      }
    }
    cppresult =  (bool)(arg1)->nearAltitudeConflict(arg2,arg3,arg4);
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_KinematicBands_getCoreDetectionPtr(SwigObj * carg1) {
    Detection3D * cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (Detection3D *)((larcfm::KinematicBands const *)arg1)->getCoreDetectionPtr();
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(Detection3D));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_KinematicBands_getCoreDetectionRef(SwigObj * carg1) {
    Detection3D * cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (Detection3D *) &((larcfm::KinematicBands const *)arg1)->getCoreDetectionRef();
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(Detection3D));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setCoreDetectionPtr(SwigObj * carg1, SwigObj * carg2) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    Detection3D *arg2 = (Detection3D *) 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      if (carg2)
      arg2 = (Detection3D *) carg2->obj;
    }
    (arg1)->setCoreDetectionPtr((Detection3D const *)arg2);
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_setCoreDetectionRef(SwigObj * carg1, SwigObj * carg2) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    Detection3D *arg2 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      if (carg2)
      arg2 = (Detection3D *) carg2->obj;
      else
      arg2 = (Detection3D *) 0;
    }
    (arg1)->setCoreDetectionRef((Detection3D const &)*arg2);
  }
  
  
  SWIGEXPORTC char * _wrap_KinematicBands_FmSet(SwigObj * carg1) {
    std::string* cppresult;
    std::vector< std::string > *arg1 = 0 ;
    char * result;
    
    {
      if (carg1)
      arg1 = (std::vector< std::string > *) carg1->obj;
      else
      arg1 = (std::vector< std::string > *) 0;
    }
    {
      const std::string result_ref =  larcfm::KinematicBands::FmSet((std::vector< std::string > const &)*arg1);cppresult = new std::string(result_ref);
    }
    {
      const char *str = cppresult->c_str();
      size_t len = strlen(str);
      result = (char *) malloc(len + 1);
      memcpy(result, str, len);
      result[len] = '\0';
    }
    return result;
  }
  
  
  SWIGEXPORTC char * _wrap_KinematicBands_toString(SwigObj * carg1) {
    std::string* cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    char * result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      const std::string result_ref =  ((larcfm::KinematicBands const *)arg1)->toString();cppresult = new std::string(result_ref);
    }
    {
      const char *str = cppresult->c_str();
      size_t len = strlen(str);
      result = (char *) malloc(len + 1);
      memcpy(result, str, len);
      result[len] = '\0';
    }
    return result;
  }
  
  
  SWIGEXPORTC char * _wrap_KinematicBands_prettyPrint(SwigObj * carg1) {
    std::string* cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    char * result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      const std::string result_ref =  (arg1)->prettyPrint();cppresult = new std::string(result_ref);
    }
    {
      const char *str = cppresult->c_str();
      size_t len = strlen(str);
      result = (char *) malloc(len + 1);
      memcpy(result, str, len);
      result[len] = '\0';
    }
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_KinematicBands_linearProjection(SwigObj * carg1, double carg2) {
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->linearProjection(arg2);
  }
  
  
  SWIGEXPORTC bool _wrap_KinematicBands_hasError(SwigObj * carg1) {
    bool cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (bool)((larcfm::KinematicBands const *)arg1)->hasError();
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC bool _wrap_KinematicBands_hasMessage(SwigObj * carg1) {
    bool cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (bool)((larcfm::KinematicBands const *)arg1)->hasMessage();
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC char * _wrap_KinematicBands_getMessage(SwigObj * carg1) {
    std::string* cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    char * result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      const std::string result_ref =  (arg1)->getMessage();cppresult = new std::string(result_ref);
    }
    {
      const char *str = cppresult->c_str();
      size_t len = strlen(str);
      result = (char *) malloc(len + 1);
      memcpy(result, str, len);
      result[len] = '\0';
    }
    return result;
  }
  
  
  SWIGEXPORTC char * _wrap_KinematicBands_getMessageNoClear(SwigObj * carg1) {
    std::string* cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    char * result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    {
      const std::string result_ref =  ((larcfm::KinematicBands const *)arg1)->getMessageNoClear();cppresult = new std::string(result_ref);
    }
    {
      const char *str = cppresult->c_str();
      size_t len = strlen(str);
      result = (char *) malloc(len + 1);
      memcpy(result, str, len);
      result[len] = '\0';
    }
    return result;
  }
  
  
  SWIGEXPORTC bool _wrap_KinematicBands_isLatLon(SwigObj * carg1) {
    bool cppresult;
    larcfm::KinematicBands *arg1 = (larcfm::KinematicBands *) 0 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::KinematicBands *) carg1->obj;
    }
    cppresult =  (bool)((larcfm::KinematicBands const *)arg1)->isLatLon();
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_delete_KinematicBands(SwigObj * carg1) {
    SWIG_remove_registry_entry(carg1);
    SWIG_destroy_object(carg1);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_VERSION_set(const char * carg1) {
    char *arg1 = (char *) 0 ;
    
    arg1 = (char *) carg1;
    {
      if (arg1) {
        larcfm::Daidalus::VERSION = (char const *) (new char[strlen((const char *)arg1)+1]);
        strcpy((char *)larcfm::Daidalus::VERSION, (const char *)arg1);
      } else {
        larcfm::Daidalus::VERSION = 0;
      }
    }
  }
  
  
  SWIGEXPORTC const char * _wrap_Daidalus_VERSION_get() {
    const char * cppresult;
    const char * result;
    
    cppresult =  (char *)larcfm::Daidalus::VERSION;
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_new_Daidalus() {
    SwigObj * result;
    
    result = SWIG_create_object("larcfm::Daidalus");
    result->obj = (void*) new larcfm::Daidalus();
    
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_new_Daidalus_Detection3D(SwigObj * carg1) {
    Detection3D *arg1 = (Detection3D *) 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (Detection3D *) carg1->obj;
    }
    result = SWIG_create_object("larcfm::Daidalus");
    result->obj = (void*) new larcfm::Daidalus(arg1);
    
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_copy_Daidalus(SwigObj * carg1) {
    larcfm::Daidalus *arg1 = 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
      else
      arg1 = (larcfm::Daidalus *) 0;
    }
    result = SWIG_create_object("larcfm::Daidalus");
    result->obj = (void*) new larcfm::Daidalus((larcfm::Daidalus const &)*arg1);
    
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_delete_Daidalus(SwigObj * carg1) {
    SWIG_remove_registry_entry(carg1);
    SWIG_destroy_object(carg1);
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Daidalus_getAircraftList(SwigObj * carg1) {
    std::vector< TrafficState > * cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      const std::vector< TrafficState > result_ref =  ((larcfm::Daidalus const *)arg1)->getAircraftList();cppresult = new std::vector< TrafficState >(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(std::vector< TrafficState >));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setAircraftList(SwigObj * carg1, SwigObj * carg2, double carg3) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    std::vector< TrafficState > *arg2 = 0 ;
    double arg3 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2)
      arg2 = (std::vector< TrafficState > *) carg2->obj;
      else
      arg2 = (std::vector< TrafficState > *) 0;
    }
    arg3 = (double) carg3;
    (arg1)->setAircraftList((std::vector< TrafficState > const &)*arg2,arg3);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_reset(SwigObj * carg1) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    (arg1)->reset();
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Daidalus_getDetector(SwigObj * carg1) {
    Detection3D * cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (Detection3D *)((larcfm::Daidalus const *)arg1)->getDetector();
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(Detection3D));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setDetector(SwigObj * carg1, SwigObj * carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    Detection3D *arg2 = (Detection3D *) 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2)
      arg2 = (Detection3D *) carg2->obj;
    }
    (arg1)->setDetector((Detection3D const *)arg2);
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Daidalus_PT5() {
    std::vector< AlertThresholds > * cppresult;
    SwigObj * result;
    
    {
      const std::vector< AlertThresholds > result_ref =  larcfm::Daidalus::PT5();cppresult = new std::vector< AlertThresholds >(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(std::vector< AlertThresholds >));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Daidalus_MOPS() {
    std::vector< AlertThresholds > * cppresult;
    SwigObj * result;
    
    {
      const std::vector< AlertThresholds > result_ref =  larcfm::Daidalus::MOPS();cppresult = new std::vector< AlertThresholds >(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(std::vector< AlertThresholds >));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Daidalus_getParameters(SwigObj * carg1) {
    DaidalusParameters * cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      const DaidalusParameters result_ref =  ((larcfm::Daidalus const *)arg1)->getParameters();cppresult = new DaidalusParameters(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(DaidalusParameters));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC int _wrap_Daidalus_numberOfAircraft(SwigObj * carg1) {
    int cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    int result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (int)((larcfm::Daidalus const *)arg1)->numberOfAircraft();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC char * _wrap_Daidalus_aircraftName(SwigObj * carg1, int carg2) {
    std::string* cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    int arg2 ;
    char * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (int) carg2;
    {
      const std::string result_ref =  (arg1)->aircraftName(arg2);cppresult = new std::string(result_ref);
    }
    {
      const char *str = cppresult->c_str();
      size_t len = strlen(str);
      result = (char *) malloc(len + 1);
      memcpy(result, str, len);
      result[len] = '\0';
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Daidalus_getWindField(SwigObj * carg1) {
    larcfm::Velocity * cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      const larcfm::Velocity result_ref =  ((larcfm::Daidalus const *)arg1)->getWindField();cppresult = new larcfm::Velocity(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::Velocity));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setWindField(SwigObj * carg1, SwigObj * carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    larcfm::Velocity *arg2 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2)
      arg2 = (larcfm::Velocity *) carg2->obj;
      else
      arg2 = (larcfm::Velocity *) 0;
    }
    (arg1)->setWindField((larcfm::Velocity const &)*arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setOwnshipState_Daidalus_s_Position_Velocity_d(SwigObj * carg1, char * carg2, SwigObj * carg3, SwigObj * carg4, double carg5) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    std::string *arg2 = 0 ;
    larcfm::Position *arg3 = 0 ;
    larcfm::Velocity *arg4 = 0 ;
    double arg5 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    {
      if (carg3)
      arg3 = (larcfm::Position *) carg3->obj;
      else
      arg3 = (larcfm::Position *) 0;
    }
    {
      if (carg4)
      arg4 = (larcfm::Velocity *) carg4->obj;
      else
      arg4 = (larcfm::Velocity *) 0;
    }
    arg5 = (double) carg5;
    (arg1)->setOwnshipState((std::string const &)*arg2,(larcfm::Position const &)*arg3,(larcfm::Velocity const &)*arg4,arg5);
    {
      if (arg2)
      delete arg2;
    }
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setOwnshipState_Daidalus_TrafficState_d(SwigObj * carg1, SwigObj * carg2, double carg3) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    TrafficState *arg2 = 0 ;
    double arg3 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2)
      arg2 = (TrafficState *) carg2->obj;
      else
      arg2 = (TrafficState *) 0;
    }
    arg3 = (double) carg3;
    (arg1)->setOwnshipState((TrafficState const &)*arg2,arg3);
  }
  
  
  SWIGEXPORTC int _wrap_Daidalus_addTrafficState_Daidalus_s_Position_Velocity_d(SwigObj * carg1, char * carg2, SwigObj * carg3, SwigObj * carg4, double carg5) {
    int cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    std::string *arg2 = 0 ;
    larcfm::Position *arg3 = 0 ;
    larcfm::Velocity *arg4 = 0 ;
    double arg5 ;
    int result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    {
      if (carg3)
      arg3 = (larcfm::Position *) carg3->obj;
      else
      arg3 = (larcfm::Position *) 0;
    }
    {
      if (carg4)
      arg4 = (larcfm::Velocity *) carg4->obj;
      else
      arg4 = (larcfm::Velocity *) 0;
    }
    arg5 = (double) carg5;
    cppresult =  (int)(arg1)->addTrafficState((std::string const &)*arg2,(larcfm::Position const &)*arg3,(larcfm::Velocity const &)*arg4,arg5);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC int _wrap_Daidalus_addTrafficState_Daidalus_s_Position_Velocity(SwigObj * carg1, char * carg2, SwigObj * carg3, SwigObj * carg4) {
    int cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    std::string *arg2 = 0 ;
    larcfm::Position *arg3 = 0 ;
    larcfm::Velocity *arg4 = 0 ;
    int result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    {
      if (carg3)
      arg3 = (larcfm::Position *) carg3->obj;
      else
      arg3 = (larcfm::Position *) 0;
    }
    {
      if (carg4)
      arg4 = (larcfm::Velocity *) carg4->obj;
      else
      arg4 = (larcfm::Velocity *) 0;
    }
    cppresult =  (int)(arg1)->addTrafficState((std::string const &)*arg2,(larcfm::Position const &)*arg3,(larcfm::Velocity const &)*arg4);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC int _wrap_Daidalus_addTrafficState_Daidalus_TrafficState_d(SwigObj * carg1, SwigObj * carg2, double carg3) {
    int cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    TrafficState *arg2 = 0 ;
    double arg3 ;
    int result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2)
      arg2 = (TrafficState *) carg2->obj;
      else
      arg2 = (TrafficState *) 0;
    }
    arg3 = (double) carg3;
    cppresult =  (int)(arg1)->addTrafficState((TrafficState const &)*arg2,arg3);
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC int _wrap_Daidalus_addTrafficState_Daidalus_TrafficState(SwigObj * carg1, SwigObj * carg2) {
    int cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    TrafficState *arg2 = 0 ;
    int result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2)
      arg2 = (TrafficState *) carg2->obj;
      else
      arg2 = (TrafficState *) 0;
    }
    cppresult =  (int)(arg1)->addTrafficState((TrafficState const &)*arg2);
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_resetOwnship_Daidalus_i(SwigObj * carg1, int carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    int arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (int) carg2;
    (arg1)->resetOwnship(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_resetOwnship_Daidalus_s(SwigObj * carg1, char * carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    std::string *arg2 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    (arg1)->resetOwnship((std::string const &)*arg2);
    {
      if (arg2)
      delete arg2;
    }
  }
  
  
  SWIGEXPORTC int _wrap_Daidalus_aircraftIndex(SwigObj * carg1, char * carg2) {
    int cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (int)((larcfm::Daidalus const *)arg1)->aircraftIndex((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_clearAlertThresholds(SwigObj * carg1) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    (arg1)->clearAlertThresholds();
  }
  
  
  SWIGEXPORTC int _wrap_Daidalus_mostSevereAlertThresholds(SwigObj * carg1) {
    int cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    int result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (int)(arg1)->mostSevereAlertThresholds();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC bool _wrap_Daidalus_setAlertThresholds(SwigObj * carg1, int carg2, SwigObj * carg3) {
    bool cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    int arg2 ;
    AlertThresholds *arg3 = 0 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (int) carg2;
    {
      if (carg3)
      arg3 = (AlertThresholds *) carg3->obj;
      else
      arg3 = (AlertThresholds *) 0;
    }
    cppresult =  (bool)(arg1)->setAlertThresholds(arg2,(AlertThresholds const &)*arg3);
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC int _wrap_Daidalus_addAlertThresholds(SwigObj * carg1, SwigObj * carg2) {
    int cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    AlertThresholds *arg2 = 0 ;
    int result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2)
      arg2 = (AlertThresholds *) carg2->obj;
      else
      arg2 = (AlertThresholds *) 0;
    }
    cppresult =  (int)(arg1)->addAlertThresholds((AlertThresholds const &)*arg2);
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Daidalus_getAlertThresholds(SwigObj * carg1, int carg2) {
    AlertThresholds * cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    int arg2 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (int) carg2;
    {
      const AlertThresholds result_ref =  ((larcfm::Daidalus const *)arg1)->getAlertThresholds(arg2);cppresult = new AlertThresholds(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(AlertThresholds));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setAlertor(SwigObj * carg1, SwigObj * carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    std::vector< AlertThresholds > *arg2 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2)
      arg2 = (std::vector< AlertThresholds > *) carg2->obj;
      else
      arg2 = (std::vector< AlertThresholds > *) 0;
    }
    (arg1)->setAlertor((std::vector< AlertThresholds > const &)*arg2);
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Daidalus_getAlertor(SwigObj * carg1) {
    std::vector< AlertThresholds > * cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      const std::vector< AlertThresholds > result_ref =  ((larcfm::Daidalus const *)arg1)->getAlertor();cppresult = new std::vector< AlertThresholds >(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(std::vector< AlertThresholds >));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Daidalus_lastAlertInfo(SwigObj * carg1) {
    AlertInfo * cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      const AlertInfo result_ref =  ((larcfm::Daidalus const *)arg1)->lastAlertInfo();cppresult = new AlertInfo(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(AlertInfo));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC int _wrap_Daidalus_alertingAt(SwigObj * carg1, int carg2, double carg3) {
    int cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    int arg2 ;
    double arg3 ;
    int result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (int) carg2;
    arg3 = (double) carg3;
    cppresult =  (int)(arg1)->alertingAt(arg2,arg3);
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getCurrentTime(SwigObj * carg1) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getCurrentTime();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC int _wrap_Daidalus_alerting(SwigObj * carg1, int carg2) {
    int cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    int arg2 ;
    int result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (int) carg2;
    cppresult =  (int)(arg1)->alerting(arg2);
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Daidalus_timeIntervalOfViolationAt(SwigObj * carg1, int carg2, double carg3) {
    ConflictData * cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    int arg2 ;
    double arg3 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (int) carg2;
    arg3 = (double) carg3;
    {
      const ConflictData result_ref =  (arg1)->timeIntervalOfViolationAt(arg2,arg3);cppresult = new ConflictData(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(ConflictData));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Daidalus_timeIntervalOfViolation(SwigObj * carg1, int carg2) {
    ConflictData * cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    int arg2 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (int) carg2;
    {
      const ConflictData result_ref =  (arg1)->timeIntervalOfViolation(arg2);cppresult = new ConflictData(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(ConflictData));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_timeToViolationAt(SwigObj * carg1, int carg2, double carg3) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    int arg2 ;
    double arg3 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (int) carg2;
    arg3 = (double) carg3;
    cppresult =  (double)(arg1)->timeToViolationAt(arg2,arg3);
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_timeToViolation(SwigObj * carg1, int carg2) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    int arg2 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (int) carg2;
    cppresult =  (double)(arg1)->timeToViolation(arg2);
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Daidalus_getKinematicBandsAt(SwigObj * carg1, double carg2) {
    larcfm::KinematicBands * cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      const larcfm::KinematicBands result_ref =  (arg1)->getKinematicBandsAt(arg2);cppresult = new larcfm::KinematicBands(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::KinematicBands));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Daidalus_getOwnshipStateAt(SwigObj * carg1, double carg2) {
    OwnshipState * cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      const OwnshipState result_ref =  ((larcfm::Daidalus const *)arg1)->getOwnshipStateAt(arg2);cppresult = new OwnshipState(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(OwnshipState));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Daidalus_getOwnshipState(SwigObj * carg1) {
    OwnshipState * cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      const OwnshipState result_ref =  ((larcfm::Daidalus const *)arg1)->getOwnshipState();cppresult = new OwnshipState(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(OwnshipState));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Daidalus_getTrafficStateAt(SwigObj * carg1, int carg2, double carg3) {
    TrafficState * cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    int arg2 ;
    double arg3 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (int) carg2;
    arg3 = (double) carg3;
    {
      const TrafficState result_ref =  ((larcfm::Daidalus const *)arg1)->getTrafficStateAt(arg2,arg3);cppresult = new TrafficState(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(TrafficState));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Daidalus_getTrafficState(SwigObj * carg1, int carg2) {
    TrafficState * cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    int arg2 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (int) carg2;
    {
      const TrafficState result_ref =  ((larcfm::Daidalus const *)arg1)->getTrafficState(arg2);cppresult = new TrafficState(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(TrafficState));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC char * _wrap_Daidalus_ownshipAtToPVS(SwigObj * carg1, double carg2, int carg3) {
    std::string* cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    int arg3 ;
    char * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    arg3 = (int) carg3;
    {
      const std::string result_ref =  ((larcfm::Daidalus const *)arg1)->ownshipAtToPVS(arg2,arg3);cppresult = new std::string(result_ref);
    }
    {
      const char *str = cppresult->c_str();
      size_t len = strlen(str);
      result = (char *) malloc(len + 1);
      memcpy(result, str, len);
      result[len] = '\0';
    }
    return result;
  }
  
  
  SWIGEXPORTC char * _wrap_Daidalus_ownshipToPVS(SwigObj * carg1, int carg2) {
    std::string* cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    int arg2 ;
    char * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (int) carg2;
    {
      const std::string result_ref =  ((larcfm::Daidalus const *)arg1)->ownshipToPVS(arg2);cppresult = new std::string(result_ref);
    }
    {
      const char *str = cppresult->c_str();
      size_t len = strlen(str);
      result = (char *) malloc(len + 1);
      memcpy(result, str, len);
      result[len] = '\0';
    }
    return result;
  }
  
  
  SWIGEXPORTC char * _wrap_Daidalus_trafficAtToPVS(SwigObj * carg1, int carg2, double carg3, int carg4) {
    std::string* cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    int arg2 ;
    double arg3 ;
    int arg4 ;
    char * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (int) carg2;
    arg3 = (double) carg3;
    arg4 = (int) carg4;
    {
      const std::string result_ref =  ((larcfm::Daidalus const *)arg1)->trafficAtToPVS(arg2,arg3,arg4);cppresult = new std::string(result_ref);
    }
    {
      const char *str = cppresult->c_str();
      size_t len = strlen(str);
      result = (char *) malloc(len + 1);
      memcpy(result, str, len);
      result[len] = '\0';
    }
    return result;
  }
  
  
  SWIGEXPORTC char * _wrap_Daidalus_trafficToPVS(SwigObj * carg1, int carg2, int carg3) {
    std::string* cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    int arg2 ;
    int arg3 ;
    char * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (int) carg2;
    arg3 = (int) carg3;
    {
      const std::string result_ref =  ((larcfm::Daidalus const *)arg1)->trafficToPVS(arg2,arg3);cppresult = new std::string(result_ref);
    }
    {
      const char *str = cppresult->c_str();
      size_t len = strlen(str);
      result = (char *) malloc(len + 1);
      memcpy(result, str, len);
      result[len] = '\0';
    }
    return result;
  }
  
  
  SWIGEXPORTC char * _wrap_Daidalus_aircraftListAtToPVS(SwigObj * carg1, double carg2, int carg3) {
    std::string* cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    int arg3 ;
    char * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    arg3 = (int) carg3;
    {
      const std::string result_ref =  ((larcfm::Daidalus const *)arg1)->aircraftListAtToPVS(arg2,arg3);cppresult = new std::string(result_ref);
    }
    {
      const char *str = cppresult->c_str();
      size_t len = strlen(str);
      result = (char *) malloc(len + 1);
      memcpy(result, str, len);
      result[len] = '\0';
    }
    return result;
  }
  
  
  SWIGEXPORTC char * _wrap_Daidalus_aircraftListToPVS(SwigObj * carg1, int carg2) {
    std::string* cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    int arg2 ;
    char * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (int) carg2;
    {
      const std::string result_ref =  ((larcfm::Daidalus const *)arg1)->aircraftListToPVS(arg2);cppresult = new std::string(result_ref);
    }
    {
      const char *str = cppresult->c_str();
      size_t len = strlen(str);
      result = (char *) malloc(len + 1);
      memcpy(result, str, len);
      result[len] = '\0';
    }
    return result;
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Daidalus_getKinematicBands(SwigObj * carg1) {
    larcfm::KinematicBands * cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      const larcfm::KinematicBands result_ref =  (arg1)->getKinematicBands();cppresult = new larcfm::KinematicBands(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(larcfm::KinematicBands));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getDTHR_Daidalus(SwigObj * carg1) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getDTHR();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getZTHR_Daidalus(SwigObj * carg1) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getZTHR();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getTTHR(SwigObj * carg1) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getTTHR();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getTCOA(SwigObj * carg1) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getTCOA();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getD_Daidalus(SwigObj * carg1) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getD();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getH_Daidalus(SwigObj * carg1) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getH();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setDTHR_Daidalus_d(SwigObj * carg1, double carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setDTHR(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setZTHR_Daidalus_d(SwigObj * carg1, double carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setZTHR(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setTTHR(SwigObj * carg1, double carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setTTHR(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setTCOA(SwigObj * carg1, double carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setTCOA(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setD_Daidalus_d(SwigObj * carg1, double carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setD(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setH_Daidalus_d(SwigObj * carg1, double carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setH(arg2);
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getDTHR_Daidalus_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getDTHR((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getZTHR_Daidalus_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getZTHR((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getD_Daidalus_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getD((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getH_Daidalus_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getH((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setDTHR_Daidalus_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setDTHR(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setZTHR_Daidalus_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setZTHR(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setD_Daidalus_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setD(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setH_Daidalus_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setH(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getAlertingTime_Daidalus(SwigObj * carg1) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getAlertingTime();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getAlertingTime_Daidalus_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getAlertingTime((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getLookaheadTime_Daidalus(SwigObj * carg1) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getLookaheadTime();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getLookaheadTime_Daidalus_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getLookaheadTime((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getMinGroundSpeed_Daidalus(SwigObj * carg1) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getMinGroundSpeed();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getMinGroundSpeed_Daidalus_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getMinGroundSpeed((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getMaxGroundSpeed_Daidalus(SwigObj * carg1) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getMaxGroundSpeed();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getMaxGroundSpeed_Daidalus_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getMaxGroundSpeed((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getMinVerticalSpeed_Daidalus(SwigObj * carg1) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getMinVerticalSpeed();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getMinVerticalSpeed_Daidalus_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getMinVerticalSpeed((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getMaxVerticalSpeed_Daidalus(SwigObj * carg1) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getMaxVerticalSpeed();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getMaxVerticalSpeed_Daidalus_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getMaxVerticalSpeed((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getMinAltitude_Daidalus(SwigObj * carg1) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getMinAltitude();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getMinAltitude_Daidalus_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getMinAltitude((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getMaxAltitude_Daidalus(SwigObj * carg1) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getMaxAltitude();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getMaxAltitude_Daidalus_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getMaxAltitude((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getTrackStep_Daidalus(SwigObj * carg1) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getTrackStep();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getTrackStep_Daidalus_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getTrackStep((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getGroundSpeedStep_Daidalus(SwigObj * carg1) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getGroundSpeedStep();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getGroundSpeedStep_Daidalus_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getGroundSpeedStep((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getVerticalSpeedStep_Daidalus(SwigObj * carg1) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getVerticalSpeedStep();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getVerticalSpeedStep_Daidalus_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getVerticalSpeedStep((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getAltitudeStep_Daidalus(SwigObj * carg1) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getAltitudeStep();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getAltitudeStep_Daidalus_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getAltitudeStep((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getHorizontalAcceleration_Daidalus(SwigObj * carg1) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getHorizontalAcceleration();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getHorizontalAcceleration_Daidalus_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getHorizontalAcceleration((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getVerticalAcceleration_Daidalus(SwigObj * carg1) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getVerticalAcceleration();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getVerticalAcceleration_Daidalus_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getVerticalAcceleration((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getTurnRate_Daidalus(SwigObj * carg1) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getTurnRate();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getTurnRate_Daidalus_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getTurnRate((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getBankAngle_Daidalus(SwigObj * carg1) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getBankAngle();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getBankAngle_Daidalus_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getBankAngle((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getVerticalRate_Daidalus(SwigObj * carg1) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getVerticalRate();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getVerticalRate_Daidalus_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getVerticalRate((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getRecoveryStabilityTime_Daidalus(SwigObj * carg1) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getRecoveryStabilityTime();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getRecoveryStabilityTime_Daidalus_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getRecoveryStabilityTime((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getMaxRecoveryTime_Daidalus(SwigObj * carg1) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getMaxRecoveryTime();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getMaxRecoveryTime_Daidalus_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getMaxRecoveryTime((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getMinHorizontalRecovery_Daidalus(SwigObj * carg1) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getMinHorizontalRecovery();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getMinHorizontalRecovery_Daidalus_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getMinHorizontalRecovery((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getMinVerticalRecovery_Daidalus(SwigObj * carg1) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getMinVerticalRecovery();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getMinVerticalRecovery_Daidalus_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getMinVerticalRecovery((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setAlertingTime_Daidalus_d(SwigObj * carg1, double carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setAlertingTime(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setAlertingTime_Daidalus_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setAlertingTime(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setLookaheadTime_Daidalus_d(SwigObj * carg1, double carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setLookaheadTime(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setLookaheadTime_Daidalus_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setLookaheadTime(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setMinGroundSpeed_Daidalus_d(SwigObj * carg1, double carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setMinGroundSpeed(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setMinGroundSpeed_Daidalus_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setMinGroundSpeed(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setMaxGroundSpeed_Daidalus_d(SwigObj * carg1, double carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setMaxGroundSpeed(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setMaxGroundSpeed_Daidalus_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setMaxGroundSpeed(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setMinVerticalSpeed_Daidalus_d(SwigObj * carg1, double carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setMinVerticalSpeed(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setMinVerticalSpeed_Daidalus_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setMinVerticalSpeed(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setMaxVerticalSpeed_Daidalus_d(SwigObj * carg1, double carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setMaxVerticalSpeed(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setMaxVerticalSpeed_Daidalus_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setMaxVerticalSpeed(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setMinAltitude_Daidalus_d(SwigObj * carg1, double carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setMinAltitude(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setMinAltitude_Daidalus_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setMinAltitude(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setMaxAltitude_Daidalus_d(SwigObj * carg1, double carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setMaxAltitude(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setMaxAltitude_Daidalus_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setMaxAltitude(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC bool _wrap_Daidalus_isEnabledImplicitBands(SwigObj * carg1) {
    bool cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (bool)((larcfm::Daidalus const *)arg1)->isEnabledImplicitBands();
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setImplicitBands(SwigObj * carg1, bool carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    bool arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (bool) carg2;
    (arg1)->setImplicitBands(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_enableImplicitBands(SwigObj * carg1) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    (arg1)->enableImplicitBands();
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_disableImplicitBands(SwigObj * carg1) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    (arg1)->disableImplicitBands();
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setTrackStep_Daidalus_d(SwigObj * carg1, double carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setTrackStep(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setTrackStep_Daidalus_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setTrackStep(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setGroundSpeedStep_Daidalus_d(SwigObj * carg1, double carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setGroundSpeedStep(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setGroundSpeedStep_Daidalus_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setGroundSpeedStep(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setVerticalSpeedStep_Daidalus_d(SwigObj * carg1, double carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setVerticalSpeedStep(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setVerticalSpeedStep_Daidalus_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setVerticalSpeedStep(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setAltitudeStep_Daidalus_d(SwigObj * carg1, double carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setAltitudeStep(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setAltitudeStep_Daidalus_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setAltitudeStep(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setHorizontalAcceleration_Daidalus_d(SwigObj * carg1, double carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setHorizontalAcceleration(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setHorizontalAcceleration_Daidalus_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setHorizontalAcceleration(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setVerticalAcceleration_Daidalus_d(SwigObj * carg1, double carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setVerticalAcceleration(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setVerticalAcceleration_Daidalus_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setVerticalAcceleration(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setTurnRate_Daidalus_d(SwigObj * carg1, double carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setTurnRate(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setTurnRate_Daidalus_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setTurnRate(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setBankAngle_Daidalus_d(SwigObj * carg1, double carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setBankAngle(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setBankAngle_Daidalus_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setBankAngle(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setVerticalRate_Daidalus_d(SwigObj * carg1, double carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setVerticalRate(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setVerticalRate_Daidalus_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setVerticalRate(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setRecoveryStabilityTime_Daidalus_d(SwigObj * carg1, double carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setRecoveryStabilityTime(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setRecoveryStabilityTime_Daidalus_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setRecoveryStabilityTime(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setMaxRecoveryTime_Daidalus_d(SwigObj * carg1, double carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setMaxRecoveryTime(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setMaxRecoveryTime_Daidalus_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setMaxRecoveryTime(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setMinHorizontalRecovery_Daidalus_d(SwigObj * carg1, double carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setMinHorizontalRecovery(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setMinHorizontalRecovery_Daidalus_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setMinHorizontalRecovery(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setMinVerticalRecovery_Daidalus_d(SwigObj * carg1, double carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setMinVerticalRecovery(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setMinVerticalRecovery_Daidalus_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setMinVerticalRecovery(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Daidalus_getUrgencyStrategyRef(SwigObj * carg1) {
    UrgencyStrategy * cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (UrgencyStrategy *)((larcfm::Daidalus const *)arg1)->getUrgencyStrategyRef();
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(UrgencyStrategy));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setUrgencyStrategy(SwigObj * carg1, SwigObj * carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    UrgencyStrategy *arg2 = (UrgencyStrategy *) 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2)
      arg2 = (UrgencyStrategy *) carg2->obj;
    }
    (arg1)->setUrgencyStrategy((UrgencyStrategy const *)arg2);
  }
  
  
  SWIGEXPORTC SwigObj * _wrap_Daidalus_mostUrgentAircraftAt(SwigObj * carg1, double carg2) {
    TrafficState * cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    SwigObj * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      const TrafficState result_ref =  (arg1)->mostUrgentAircraftAt(arg2);cppresult = new TrafficState(result_ref);
    }
    {
      result = (SwigObj*) SWIG_create_object(SWIG_STR(TrafficState));
      result->obj = (void*) cppresult;
    }
    return result;
  }
  
  
  SWIGEXPORTC bool _wrap_Daidalus_isEnabledConflictCriteria(SwigObj * carg1) {
    bool cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (bool)((larcfm::Daidalus const *)arg1)->isEnabledConflictCriteria();
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setConflictCriteria(SwigObj * carg1, bool carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    bool arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (bool) carg2;
    (arg1)->setConflictCriteria(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_enableConflictCriteria(SwigObj * carg1) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    (arg1)->enableConflictCriteria();
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_disableConflictCriteria(SwigObj * carg1) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    (arg1)->disableConflictCriteria();
  }
  
  
  SWIGEXPORTC bool _wrap_Daidalus_isEnabledRecoveryCriteria(SwigObj * carg1) {
    bool cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (bool)((larcfm::Daidalus const *)arg1)->isEnabledRecoveryCriteria();
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setRecoveryCriteria(SwigObj * carg1, bool carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    bool arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (bool) carg2;
    (arg1)->setRecoveryCriteria(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_enableRecoveryCriteria(SwigObj * carg1) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    (arg1)->enableRecoveryCriteria();
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_disableRecoveryCriteria(SwigObj * carg1) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    (arg1)->disableRecoveryCriteria();
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setRepulsiveCriteria(SwigObj * carg1, bool carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    bool arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (bool) carg2;
    (arg1)->setRepulsiveCriteria(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_enableRepulsiveCriteria(SwigObj * carg1) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    (arg1)->enableRepulsiveCriteria();
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_disableRepulsiveCriteria(SwigObj * carg1) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    (arg1)->disableRepulsiveCriteria();
  }
  
  
  SWIGEXPORTC bool _wrap_Daidalus_isEnabledRecoveryTrackBands(SwigObj * carg1) {
    bool cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (bool)((larcfm::Daidalus const *)arg1)->isEnabledRecoveryTrackBands();
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC bool _wrap_Daidalus_isEnabledRecoveryGroundSpeedBands(SwigObj * carg1) {
    bool cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (bool)((larcfm::Daidalus const *)arg1)->isEnabledRecoveryGroundSpeedBands();
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC bool _wrap_Daidalus_isEnabledRecoveryVerticalSpeedBands(SwigObj * carg1) {
    bool cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (bool)((larcfm::Daidalus const *)arg1)->isEnabledRecoveryVerticalSpeedBands();
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setRecoveryTrackBands(SwigObj * carg1, bool carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    bool arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (bool) carg2;
    (arg1)->setRecoveryTrackBands(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setRecoveryGroundSpeedBands(SwigObj * carg1, bool carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    bool arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (bool) carg2;
    (arg1)->setRecoveryGroundSpeedBands(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setRecoveryVerticalSpeedBands(SwigObj * carg1, bool carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    bool arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (bool) carg2;
    (arg1)->setRecoveryVerticalSpeedBands(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setRecoveryBands(SwigObj * carg1, bool carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    bool arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (bool) carg2;
    (arg1)->setRecoveryBands(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_enableRecoveryBands(SwigObj * carg1) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    (arg1)->enableRecoveryBands();
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_disableRecoveryBands(SwigObj * carg1) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    (arg1)->disableRecoveryBands();
  }
  
  
  SWIGEXPORTC bool _wrap_Daidalus_isEnabledBandsAlerting(SwigObj * carg1) {
    bool cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (bool)((larcfm::Daidalus const *)arg1)->isEnabledBandsAlerting();
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC bool _wrap_Daidalus_isEnabledThresholdsAlerting(SwigObj * carg1) {
    bool cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (bool)((larcfm::Daidalus const *)arg1)->isEnabledThresholdsAlerting();
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setBandsAlerting(SwigObj * carg1, bool carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    bool arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (bool) carg2;
    (arg1)->setBandsAlerting(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_enableBandsAlerting(SwigObj * carg1) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    (arg1)->enableBandsAlerting();
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_enableThresholdsAlerting(SwigObj * carg1) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    (arg1)->enableThresholdsAlerting();
  }
  
  
  SWIGEXPORTC bool _wrap_Daidalus_isEnabledTrackAlerting(SwigObj * carg1) {
    bool cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (bool)((larcfm::Daidalus const *)arg1)->isEnabledTrackAlerting();
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC bool _wrap_Daidalus_isEnabledGroundSpeedAlerting(SwigObj * carg1) {
    bool cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (bool)((larcfm::Daidalus const *)arg1)->isEnabledGroundSpeedAlerting();
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC bool _wrap_Daidalus_isEnabledVerticalSpeedAlerting(SwigObj * carg1) {
    bool cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (bool)((larcfm::Daidalus const *)arg1)->isEnabledVerticalSpeedAlerting();
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setTrackAlerting(SwigObj * carg1, bool carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    bool arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (bool) carg2;
    (arg1)->setTrackAlerting(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setGroundSpeedAlerting(SwigObj * carg1, bool carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    bool arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (bool) carg2;
    (arg1)->setGroundSpeedAlerting(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setVerticalSpeedAlerting(SwigObj * carg1, bool carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    bool arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (bool) carg2;
    (arg1)->setVerticalSpeedAlerting(arg2);
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getPreventiveAltitudeThreshold_Daidalus(SwigObj * carg1) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getPreventiveAltitudeThreshold();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getPreventiveAltitudeThreshold_Daidalus_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getPreventiveAltitudeThreshold((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getPreventiveTrackThreshold_Daidalus(SwigObj * carg1) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getPreventiveTrackThreshold();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getPreventiveTrackThreshold_Daidalus_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getPreventiveTrackThreshold((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getPreventiveGroundSpeedThreshold_Daidalus(SwigObj * carg1) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getPreventiveGroundSpeedThreshold();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getPreventiveGroundSpeedThreshold_Daidalus_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getPreventiveGroundSpeedThreshold((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getPreventiveVerticalSpeedThreshold_Daidalus(SwigObj * carg1) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getPreventiveVerticalSpeedThreshold();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getPreventiveVerticalSpeedThreshold_Daidalus_s(SwigObj * carg1, char * carg2) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getPreventiveVerticalSpeedThreshold((std::string const &)*arg2);
    result = cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC double _wrap_Daidalus_getTimeToWarningThreshold(SwigObj * carg1) {
    double cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (double)((larcfm::Daidalus const *)arg1)->getTimeToWarningThreshold();
    result = cppresult;
    return result;
  }
  
  
  SWIGEXPORTC bool _wrap_Daidalus_isEnabledWarningWhenRecovery(SwigObj * carg1) {
    bool cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (bool)((larcfm::Daidalus const *)arg1)->isEnabledWarningWhenRecovery();
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC bool _wrap_Daidalus_isEnabledWarningWhenViolation(SwigObj * carg1) {
    bool cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (bool)((larcfm::Daidalus const *)arg1)->isEnabledWarningWhenViolation();
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setPreventiveAltitudeThreshold_Daidalus_d(SwigObj * carg1, double carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setPreventiveAltitudeThreshold(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setPreventiveAltitudeThreshold_Daidalus_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setPreventiveAltitudeThreshold(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setPreventiveTrackThreshold_Daidalus_d(SwigObj * carg1, double carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setPreventiveTrackThreshold(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setPreventiveTrackThreshold_Daidalus_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setPreventiveTrackThreshold(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setPreventiveGroundSpeedThreshold_Daidalus_d(SwigObj * carg1, double carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setPreventiveGroundSpeedThreshold(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setPreventiveGroundSpeedThreshold_Daidalus_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setPreventiveGroundSpeedThreshold(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setPreventiveVerticalSpeedThreshold_Daidalus_d(SwigObj * carg1, double carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setPreventiveVerticalSpeedThreshold(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setPreventiveVerticalSpeedThreshold_Daidalus_d_s(SwigObj * carg1, double carg2, char * carg3) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    std::string *arg3 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    {
      if (carg3) {
        arg3 = new std::string(carg3);
      }
      else {
        arg3 = new std::string();
        arg3->resize(0);
      }
    }
    (arg1)->setPreventiveVerticalSpeedThreshold(arg2,(std::string const &)*arg3);
    {
      if (arg3)
      delete arg3;
    }
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setTimeToWarningThreshold(SwigObj * carg1, double carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    double arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (double) carg2;
    (arg1)->setTimeToWarningThreshold(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setWarningWhenRecovery(SwigObj * carg1, bool carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    bool arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (bool) carg2;
    (arg1)->setWarningWhenRecovery(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_enableWarningWhenRecovery(SwigObj * carg1) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    (arg1)->enableWarningWhenRecovery();
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_enableWarningWhenViolation(SwigObj * carg1) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    (arg1)->enableWarningWhenViolation();
  }
  
  
  SWIGEXPORTC bool _wrap_Daidalus_isEnabledCollisionAvoidanceBands(SwigObj * carg1) {
    bool cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (bool)((larcfm::Daidalus const *)arg1)->isEnabledCollisionAvoidanceBands();
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setCollisionAvoidanceBands(SwigObj * carg1, bool carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    bool arg2 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    arg2 = (bool) carg2;
    (arg1)->setCollisionAvoidanceBands(arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_enableCollisionAvoidanceBands(SwigObj * carg1) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    (arg1)->enableCollisionAvoidanceBands();
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_disableCollisionAvoidanceBands(SwigObj * carg1) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    (arg1)->disableCollisionAvoidanceBands();
  }
  
  
  SWIGEXPORTC bool _wrap_Daidalus_loadParametersFromFile(SwigObj * carg1, char * carg2) {
    bool cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (bool)(arg1)->loadParametersFromFile((std::string const &)*arg2);
    result = (bool) cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC bool _wrap_Daidalus_saveParametersToFile(SwigObj * carg1, char * carg2) {
    bool cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2) {
        arg2 = new std::string(carg2);
      }
      else {
        arg2 = new std::string();
        arg2->resize(0);
      }
    }
    cppresult =  (bool)(arg1)->saveParametersToFile((std::string const &)*arg2);
    result = (bool) cppresult;
    {
      if (arg2)
      delete arg2;
    }
    return result;
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_updateParameterData(SwigObj * carg1, SwigObj * carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    ParameterData *arg2 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2)
      arg2 = (ParameterData *) carg2->obj;
      else
      arg2 = (ParameterData *) 0;
    }
    ((larcfm::Daidalus const *)arg1)->updateParameterData(*arg2);
  }
  
  
  SWIGEXPORTC void _wrap_Daidalus_setParameters(SwigObj * carg1, SwigObj * carg2) {
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    ParameterData *arg2 = 0 ;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      if (carg2)
      arg2 = (ParameterData *) carg2->obj;
      else
      arg2 = (ParameterData *) 0;
    }
    (arg1)->setParameters((ParameterData const &)*arg2);
  }
  
  
  SWIGEXPORTC char * _wrap_Daidalus_toString(SwigObj * carg1) {
    std::string* cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    char * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      const std::string result_ref =  ((larcfm::Daidalus const *)arg1)->toString();cppresult = new std::string(result_ref);
    }
    {
      const char *str = cppresult->c_str();
      size_t len = strlen(str);
      result = (char *) malloc(len + 1);
      memcpy(result, str, len);
      result[len] = '\0';
    }
    return result;
  }
  
  
  SWIGEXPORTC bool _wrap_Daidalus_hasError(SwigObj * carg1) {
    bool cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (bool)((larcfm::Daidalus const *)arg1)->hasError();
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC bool _wrap_Daidalus_hasMessage(SwigObj * carg1) {
    bool cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    bool result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    cppresult =  (bool)((larcfm::Daidalus const *)arg1)->hasMessage();
    result = (bool) cppresult;
    return result;
  }
  
  
  SWIGEXPORTC char * _wrap_Daidalus_getMessage(SwigObj * carg1) {
    std::string* cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    char * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      const std::string result_ref =  (arg1)->getMessage();cppresult = new std::string(result_ref);
    }
    {
      const char *str = cppresult->c_str();
      size_t len = strlen(str);
      result = (char *) malloc(len + 1);
      memcpy(result, str, len);
      result[len] = '\0';
    }
    return result;
  }
  
  
  SWIGEXPORTC char * _wrap_Daidalus_getMessageNoClear(SwigObj * carg1) {
    std::string* cppresult;
    larcfm::Daidalus *arg1 = (larcfm::Daidalus *) 0 ;
    char * result;
    
    {
      if (carg1)
      arg1 = (larcfm::Daidalus *) carg1->obj;
    }
    {
      const std::string result_ref =  ((larcfm::Daidalus const *)arg1)->getMessageNoClear();cppresult = new std::string(result_ref);
    }
    {
      const char *str = cppresult->c_str();
      size_t len = strlen(str);
      result = (char *) malloc(len + 1);
      memcpy(result, str, len);
      result[len] = '\0';
    }
    return result;
  }
  
  
#ifdef __cplusplus
}
#endif

