/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.6
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */
#ifndef _Daidalus_proxy_H_
#define _Daidalus_proxy_H_

/* -----------------------------------------------------------------------------
 * cproxy.swg
 *
 * Definitions of C specific preprocessor symbols for proxies.
 * ----------------------------------------------------------------------------- */

#ifndef SWIGIMPORT
# ifndef __GNUC__
#   define __DLL_IMPORT __declspec(dllimport)
# else
#   define __DLL_IMPORT __attribute__((dllimport)) extern
# endif
# if !defined (__WIN32__)
#   define SWIGIMPORT extern
# else
#   define SWIGIMPORT __DLL_IMPORT
# endif
#endif

#include <stdio.h>

typedef struct {
  void *obj;
  const char **typenames;
} SwigObj;


// special value indicating any type of exception like 'catch(...)'
#define SWIG_AnyException "SWIG_AnyException"

#include <setjmp.h>

SWIGIMPORT jmp_buf SWIG_rt_env;

SWIGIMPORT struct SWIG_exc_struct {
  int code;
  char *msg;
  SwigObj *klass;
} SWIG_exc;

SWIGIMPORT void SWIG_rt_try();
SWIGIMPORT int SWIG_rt_catch(const char *type);
SWIGIMPORT void SWIG_rt_throw(SwigObj *klass, const char * msg);
SWIGIMPORT int SWIG_rt_unhandled();
SWIGIMPORT void SWIG_rt_endtry();
SWIGIMPORT int SWIG_exit(int code);

#define SWIG_try \
  SWIG_rt_try(); \
  if ((SWIG_exc.code = setjmp(SWIG_rt_env)) == 0) 
#define SWIG_catch(type) else if (SWIG_rt_catch(#type))
#define SWIG_throw(klass) SWIG_rt_throw((SwigObj *) klass, 0);
#define SWIG_throw_msg(klass, msg) SWIG_rt_throw((SwigObj *) klass, msg);
#define SWIG_endtry else SWIG_rt_unhandled(); SWIG_rt_endtry();



#include <stdarg.h>

#define SWIG_MAKE_DELETE(Name,Obj) void Name(Obj *op1, ...) {\
  Obj *obj;\
  va_list vl;\
  va_start(vl, op1);\
  do {\
    obj = va_arg(vl, Obj *);\
    delete_##Obj(obj);\
  } while (obj);\
  va_end(vl);\
}


typedef struct SwigObj_Position Position;

Position * new_Position();

Position * new_Position_LatLonAlt(void* carg1);

Position * new_Position_Vect3(void* carg1);

Position * copy_Position(Position* carg1);

Position* Position_makeLatLonAlt_d_d_d(double carg1, double carg2, double carg3);

Position* Position_makeLatLonAlt_d_s_d_s_d_s(double carg1, char * carg2, double carg3, char * carg4, double carg5, char * carg6);

Position* Position_mkLatLonAlt(double carg1, double carg2, double carg3);

Position* Position_makeXYZ_d_d_d(double carg1, double carg2, double carg3);

Position* Position_mkXYZ(double carg1, double carg2, double carg3);

Position* Position_makeXYZ_d_s_d_s_d_s(double carg1, char * carg2, double carg3, char * carg4, double carg5, char * carg6);

Position* Position_ZERO_LL();

Position* Position_ZERO_XYZ();

Position* Position_INVALID();

#include <stdbool.h>
bool Position_almostEquals_Position_Position(Position* carg1, Position* carg2);

bool Position_almostEquals_Position_Position_d_d(Position* carg1, Position* carg2, double carg3, double carg4);

void* Position_vect2(Position* carg1);

void* Position_point(Position* carg1);

void* Position_lla(Position* carg1);

bool Position_isInvalid(Position* carg1);

double Position_x(Position* carg1);

double Position_y(Position* carg1);

double Position_z(Position* carg1);

double Position_lat(Position* carg1);

double Position_lon(Position* carg1);

double Position_alt(Position* carg1);

double Position_latitude(Position* carg1);

double Position_longitude(Position* carg1);

double Position_altitude(Position* carg1);

double Position_xCoordinate(Position* carg1);

double Position_yCoordinate(Position* carg1);

double Position_zCoordinate(Position* carg1);

bool Position_isLatLon(Position* carg1);

Position* Position_mkX(Position* carg1, double carg2);

Position* Position_mkLon(Position* carg1, double carg2);

Position* Position_mkY(Position* carg1, double carg2);

Position* Position_mkLat(Position* carg1, double carg2);

Position* Position_mkZ(Position* carg1, double carg2);

Position* Position_mkAlt(Position* carg1, double carg2);

Position* Position_zeroAlt(Position* carg1);

double Position_distanceH(Position* carg1, Position* carg2);

double Position_distanceV(Position* carg1, Position* carg2);

double Position_signedDistanceV(Position* carg1, Position* carg2);

Position* Position_linear(Position* carg1, void* carg2, double carg3);

Position* Position_linearEst_Position_d_d(Position* carg1, double carg2, double carg3);

Position* Position_linearEst_Position_Velocity_d(Position* carg1, void* carg2, double carg3);

Position* Position_midPoint(Position* carg1, Position* carg2);

double Position_track(Position* carg1, Position* carg2);

void* Position_initialVelocity(Position* carg1, Position* carg2, double carg3);

void* Position_finalVelocity(Position* carg1, Position* carg2, double carg3);

double Position_representativeTrack(Position* carg1, Position* carg2);

bool Position_LoS(Position* carg1, Position* carg2, double carg3, double carg4);

bool Position_collinear(Position* carg1, Position* carg2, Position* carg3);

char * Position_toString_Position(Position* carg1);

char * Position_toString_Position_i(Position* carg1, int carg2);

char * Position_toStringUnits_Position(Position* carg1);

char * Position_toStringUnits_Position_s_s_s(Position* carg1, char * carg2, char * carg3, char * carg4);

void* Position_toStringList_Position(Position* carg1);

void* Position_toStringList_Position_i(Position* carg1, int carg2);

char * Position_toStringNP_Position(Position* carg1);

char * Position_toStringNP_Position_i(Position* carg1, int carg2);

Position* Position_parseLL(char * carg1);

Position* Position_parseXYZ(char * carg1);

Position* Position_parse(char * carg1);

void delete_Position(Position * carg1);


typedef struct SwigObj_Velocity Velocity;

Velocity * new_Velocity();

Velocity * new_Velocity_Vect3(void* carg1);

double Velocity_angle_Velocity_s(Velocity* carg1, char * carg2);

double Velocity_angle_Velocity(Velocity* carg1);

double Velocity_trk(Velocity* carg1);

double Velocity_track(Velocity* carg1, char * carg2);

double Velocity_compassAngle_Velocity(Velocity* carg1);

double Velocity_compassAngle_Velocity_s(Velocity* carg1, char * carg2);

double Velocity_gs(Velocity* carg1);

double Velocity_groundSpeed(Velocity* carg1, char * carg2);

double Velocity_vs(Velocity* carg1);

double Velocity_verticalSpeed(Velocity* carg1, char * carg2);

bool Velocity_compare(Velocity* carg1, Velocity* carg2, double carg3, double carg4, double carg5);

char * Velocity_toString_Velocity(Velocity* carg1);

char * Velocity_toString_Velocity_i(Velocity* carg1, int carg2);

char * Velocity_toStringUnits_Velocity(Velocity* carg1);

char * Velocity_toStringUnits_Velocity_s_s_s(Velocity* carg1, char * carg2, char * carg3, char * carg4);

char * Velocity_toStringXYZ_Velocity(Velocity* carg1);

char * Velocity_toStringXYZ_Velocity_i(Velocity* carg1, int carg2);

void* Velocity_toStringList_Velocity(Velocity* carg1);

void* Velocity_toStringList_Velocity_i(Velocity* carg1, int carg2);

void* Velocity_toStringXYZList_Velocity(Velocity* carg1);

void* Velocity_toStringXYZList_Velocity_i(Velocity* carg1, int carg2);

char * Velocity_toStringNP_Velocity(Velocity* carg1);

char * Velocity_toStringNP_Velocity_i(Velocity* carg1, int carg2);

Velocity* Velocity_make_Vect3(void* carg1);

Velocity* Velocity_make_Vect2(void* carg1);

Velocity* Velocity_mkVxyz(double carg1, double carg2, double carg3);

Velocity* Velocity_makeVxyz_d_d_d(double carg1, double carg2, double carg3);

Velocity* Velocity_makeVxyz_d_d_s_d_s(double carg1, double carg2, char * carg3, double carg4, char * carg5);

Velocity* Velocity_mkTrkGsVs(double carg1, double carg2, double carg3);

Velocity* Velocity_makeTrkGsVs_d_d_d(double carg1, double carg2, double carg3);

Velocity* Velocity_makeTrkGsVs_d_s_d_s_d_s(double carg1, char * carg2, double carg3, char * carg4, double carg5, char * carg6);

Velocity* Velocity_makeVel(void* carg1, void* carg2, double carg3);

Velocity* Velocity_genVel(void* carg1, void* carg2, double carg3);

Velocity* Velocity_mkAddTrk(Velocity* carg1, double carg2);

Velocity* Velocity_ZEROV_get();

Velocity* Velocity_INVALIDV();

double Velocity_trkgs2vx(double carg1, double carg2);

double Velocity_trkgs2vy(double carg1, double carg2);

void* Velocity_trkgs2v(double carg1, double carg2);

Velocity* Velocity_mkTrk_Velocity_d(Velocity* carg1, double carg2);

Velocity* Velocity_mkTrk_Velocity_d_s(Velocity* carg1, double carg2, char * carg3);

Velocity* Velocity_mkGs_Velocity_d(Velocity* carg1, double carg2);

Velocity* Velocity_mkGs_Velocity_d_s(Velocity* carg1, double carg2, char * carg3);

Velocity* Velocity_mkVs_Velocity_d(Velocity* carg1, double carg2);

Velocity* Velocity_mkVs_Velocity_d_s(Velocity* carg1, double carg2, char * carg3);

Velocity* Velocity_Hat(Velocity* carg1);

Velocity* Velocity_Neg(Velocity* carg1);

Velocity* Velocity_zeroSmallVs(Velocity* carg1, double carg2);

Velocity* Velocity_parseXYZ(char * carg1);

Velocity* Velocity_parse(char * carg1);

void delete_Velocity(Velocity * carg1);

double trkgs2vx(double carg1, double carg2);

double trkgs2vy(double carg1, double carg2);

void* trkgs2v(double carg1, double carg2);


typedef struct SwigObj_Interval Interval;

void Interval_low_set(Interval* carg1, double carg2);

double Interval_low_get(Interval* carg1);

void Interval_up_set(Interval* carg1, double carg2);

double Interval_up_get(Interval* carg1);

Interval* Interval_EMPTY_get();

Interval * new_Interval_d_d(double carg1, double carg2);

Interval * new_Interval();

Interval * copy_Interval(Interval* carg1);

bool Interval_isEmpty(Interval* carg1);

char * Interval_toString_Interval(Interval* carg1);

char * Interval_toString_Interval_i(Interval* carg1, int carg2);

char * Interval_toStringUnits(Interval* carg1, char * carg2);

bool Interval_isSingle_Interval(Interval* carg1);

bool Interval_isSingle_Interval_d(Interval* carg1, double carg2);

bool Interval_in(Interval* carg1, double carg2);

bool Interval_inCC(Interval* carg1, double carg2);

bool Interval_inCO(Interval* carg1, double carg2);

bool Interval_inOC(Interval* carg1, double carg2);

bool Interval_inOO(Interval* carg1, double carg2);

bool Interval_overlap(Interval* carg1, Interval* carg2);

Interval* Interval_intersect(Interval* carg1, Interval* carg2);

char * Interval_toPVS(Interval* carg1, int carg2);

void delete_Interval(Interval * carg1);


typedef struct SwigObj_BandsRegion BandsRegion;

#define larcfm_BandsRegion_NONE 0
#define larcfm_BandsRegion_FAR NONE + 1
#define larcfm_BandsRegion_MID FAR + 1
#define larcfm_BandsRegion_NEAR MID + 1
#define larcfm_BandsRegion_RECOVERY NEAR + 1
#define larcfm_BandsRegion_UNKNOWN RECOVERY + 1
char * BandsRegion_to_string(int carg1);

BandsRegion * new_BandsRegion();

void delete_BandsRegion(BandsRegion * carg1);


typedef struct SwigObj_KinematicBands KinematicBands;

void KinematicBands_trk_band_set(KinematicBands* carg1, void* carg2);

void* KinematicBands_trk_band_get(KinematicBands* carg1);

void KinematicBands_gs_band_set(KinematicBands* carg1, void* carg2);

void* KinematicBands_gs_band_get(KinematicBands* carg1);

void KinematicBands_vs_band_set(KinematicBands* carg1, void* carg2);

void* KinematicBands_vs_band_get(KinematicBands* carg1);

void KinematicBands_alt_band_set(KinematicBands* carg1, void* carg2);

void* KinematicBands_alt_band_get(KinematicBands* carg1);

KinematicBands * new_KinematicBands_pcDetection3D(void* carg1);

KinematicBands * new_KinematicBands();

KinematicBands * copy_KinematicBands(KinematicBands* carg1);

void* KinematicBands_getOwnship(KinematicBands* carg1);

void KinematicBands_setOwnship_KinematicBands_OwnshipState(KinematicBands* carg1, void* carg2);

void KinematicBands_setOwnship_KinematicBands_s_Position_Velocity(KinematicBands* carg1, char * carg2, Position* carg3, Velocity* carg4);

void KinematicBands_setOwnship_KinematicBands_Position_Velocity(KinematicBands* carg1, Position* carg2, Velocity* carg3);

int KinematicBands_trafficSize(KinematicBands* carg1);

void* KinematicBands_getTraffic_KinematicBands_i(KinematicBands* carg1, int carg2);

void* KinematicBands_getTraffic_KinematicBands_s(KinematicBands* carg1, char * carg2);

void* KinematicBands_getTraffic_KinematicBands(KinematicBands* carg1);

bool KinematicBands_hasOwnship(KinematicBands* carg1);

bool KinematicBands_hasTraffic(KinematicBands* carg1);

void KinematicBands_addTraffic_KinematicBands_TrafficState(KinematicBands* carg1, void* carg2);

void KinematicBands_addTraffic_KinematicBands_s_Position_Velocity(KinematicBands* carg1, char * carg2, Position* carg3, Velocity* carg4);

void KinematicBands_addTraffic_KinematicBands_Position_Velocity(KinematicBands* carg1, Position* carg2, Velocity* carg3);

void KinematicBands_setParameters(KinematicBands* carg1, void* carg2);

bool KinematicBands_isEnabledImplicitBands(KinematicBands* carg1);

void KinematicBands_setImplicitBands(KinematicBands* carg1, bool carg2);

void KinematicBands_enableImplicitBands(KinematicBands* carg1);

void KinematicBands_disableImplicitBands(KinematicBands* carg1);

double KinematicBands_getLookaheadTime_KinematicBands(KinematicBands* carg1);

double KinematicBands_getLookaheadTime_KinematicBands_s(KinematicBands* carg1, char * carg2);

void KinematicBands_setLookaheadTime_KinematicBands_d(KinematicBands* carg1, double carg2);

void KinematicBands_setLookaheadTime_KinematicBands_d_s(KinematicBands* carg1, double carg2, char * carg3);

double KinematicBands_getAlertingTime(KinematicBands* carg1);

void KinematicBands_setAlertingTime(KinematicBands* carg1, double carg2);

double KinematicBands_getMaxRecoveryTime(KinematicBands* carg1);

void KinematicBands_setMaxRecoveryTime(KinematicBands* carg1, double carg2);

double KinematicBands_getRecoveryStabilityTime(KinematicBands* carg1);

void KinematicBands_setRecoveryStabilityTime(KinematicBands* carg1, double carg2);

double KinematicBands_getMinHorizontalRecovery_KinematicBands(KinematicBands* carg1);

double KinematicBands_getMinHorizontalRecovery_KinematicBands_s(KinematicBands* carg1, char * carg2);

void KinematicBands_setMinHorizontalRecovery_KinematicBands_d(KinematicBands* carg1, double carg2);

void KinematicBands_setMinHorizontalRecovery_KinematicBands_d_s(KinematicBands* carg1, double carg2, char * carg3);

double KinematicBands_getMinVerticalRecovery_KinematicBands(KinematicBands* carg1);

double KinematicBands_getMinVerticalRecovery_KinematicBands_s(KinematicBands* carg1, char * carg2);

void KinematicBands_setMinVerticalRecovery_KinematicBands_d(KinematicBands* carg1, double carg2);

void KinematicBands_setMinVerticalRecovery_KinematicBands_d_s(KinematicBands* carg1, double carg2, char * carg3);

bool KinematicBands_isEnabledCollisionAvoidanceBands(KinematicBands* carg1);

void KinematicBands_setCollisionAvoidanceBands(KinematicBands* carg1, bool carg2);

void KinematicBands_enableCollisionAvoidanceBands(KinematicBands* carg1);

void KinematicBands_disableCollisionAvoidanceBands(KinematicBands* carg1);

char * KinematicBands_getCriteriaAircraft(KinematicBands* carg1);

void KinematicBands_setCriteriaAircraft_KinematicBands_s(KinematicBands* carg1, char * carg2);

void KinematicBands_setCriteriaAircraft_KinematicBands_pUrgencyStrategy(KinematicBands* carg1, void* carg2);

void* KinematicBands_mostUrgentAircraft(KinematicBands* carg1, void* carg2);

bool KinematicBands_isEnabledConflictCriteria(KinematicBands* carg1);

void KinematicBands_setConflictCriteria(KinematicBands* carg1, bool carg2);

void KinematicBands_enableConflictCriteria(KinematicBands* carg1);

void KinematicBands_disableConflictCriteria(KinematicBands* carg1);

bool KinematicBands_isEnabledRecoveryCriteria(KinematicBands* carg1);

void KinematicBands_setRecoveryCriteria(KinematicBands* carg1, bool carg2);

void KinematicBands_enableRecoveryCriteria(KinematicBands* carg1);

void KinematicBands_disableRecoveryCriteria(KinematicBands* carg1);

void KinematicBands_setRepulsiveCriteria(KinematicBands* carg1, bool carg2);

void KinematicBands_enableRepulsiveCriteria(KinematicBands* carg1);

void KinematicBands_disableRepulsiveCriteria(KinematicBands* carg1);

void KinematicBands_setRecoveryBands(KinematicBands* carg1, bool carg2);

void KinematicBands_enableRecoveryBands(KinematicBands* carg1);

void KinematicBands_disableRecoveryBands(KinematicBands* carg1);

double KinematicBands_getTrackStep_KinematicBands(KinematicBands* carg1);

double KinematicBands_getTrackStep_KinematicBands_s(KinematicBands* carg1, char * carg2);

void KinematicBands_setTrackStep_KinematicBands_d(KinematicBands* carg1, double carg2);

void KinematicBands_setTrackStep_KinematicBands_d_s(KinematicBands* carg1, double carg2, char * carg3);

double KinematicBands_getBankAngle_KinematicBands(KinematicBands* carg1);

double KinematicBands_getBankAngle_KinematicBands_s(KinematicBands* carg1, char * carg2);

void KinematicBands_setBankAngle_KinematicBands_d(KinematicBands* carg1, double carg2);

void KinematicBands_setBankAngle_KinematicBands_d_s(KinematicBands* carg1, double carg2, char * carg3);

double KinematicBands_getTurnRate_KinematicBands(KinematicBands* carg1);

double KinematicBands_getTurnRate_KinematicBands_s(KinematicBands* carg1, char * carg2);

void KinematicBands_setTurnRate_KinematicBands_d(KinematicBands* carg1, double carg2);

void KinematicBands_setTurnRate_KinematicBands_d_s(KinematicBands* carg1, double carg2, char * carg3);

bool KinematicBands_isEnabledRecoveryTrackBands(KinematicBands* carg1);

void KinematicBands_setRecoveryTrackBands(KinematicBands* carg1, bool carg2);

double KinematicBands_getMinGroundSpeed_KinematicBands(KinematicBands* carg1);

double KinematicBands_getMinGroundSpeed_KinematicBands_s(KinematicBands* carg1, char * carg2);

void KinematicBands_setMinGroundSpeed_KinematicBands_d(KinematicBands* carg1, double carg2);

void KinematicBands_setMinGroundSpeed_KinematicBands_d_s(KinematicBands* carg1, double carg2, char * carg3);

double KinematicBands_getMaxGroundSpeed_KinematicBands(KinematicBands* carg1);

double KinematicBands_getMaxGroundSpeed_KinematicBands_s(KinematicBands* carg1, char * carg2);

void KinematicBands_setMaxGroundSpeed_KinematicBands_d(KinematicBands* carg1, double carg2);

void KinematicBands_setMaxGroundSpeed_KinematicBands_d_s(KinematicBands* carg1, double carg2, char * carg3);

double KinematicBands_getGroundSpeedStep_KinematicBands(KinematicBands* carg1);

double KinematicBands_getGroundSpeedStep_KinematicBands_s(KinematicBands* carg1, char * carg2);

void KinematicBands_setGroundSpeedStep_KinematicBands_d(KinematicBands* carg1, double carg2);

void KinematicBands_setGroundSpeedStep_KinematicBands_d_s(KinematicBands* carg1, double carg2, char * carg3);

double KinematicBands_getHorizontalAcceleration_KinematicBands(KinematicBands* carg1);

double KinematicBands_getHorizontalAcceleration_KinematicBands_s(KinematicBands* carg1, char * carg2);

void KinematicBands_setHorizontalAcceleration_KinematicBands_d(KinematicBands* carg1, double carg2);

void KinematicBands_setHorizontalAcceleration_KinematicBands_d_s(KinematicBands* carg1, double carg2, char * carg3);

bool KinematicBands_isEnabledRecoveryGroundSpeedBands(KinematicBands* carg1);

void KinematicBands_setRecoveryGroundSpeedBands(KinematicBands* carg1, bool carg2);

double KinematicBands_getMinVerticalSpeed_KinematicBands(KinematicBands* carg1);

double KinematicBands_getMinVerticalSpeed_KinematicBands_s(KinematicBands* carg1, char * carg2);

void KinematicBands_setMinVerticalSpeed_KinematicBands_d(KinematicBands* carg1, double carg2);

void KinematicBands_setMinVerticalSpeed_KinematicBands_d_s(KinematicBands* carg1, double carg2, char * carg3);

double KinematicBands_getMaxVerticalSpeed_KinematicBands(KinematicBands* carg1);

double KinematicBands_getMaxVerticalSpeed_KinematicBands_s(KinematicBands* carg1, char * carg2);

void KinematicBands_setMaxVerticalSpeed_KinematicBands_d(KinematicBands* carg1, double carg2);

void KinematicBands_setMaxVerticalSpeed_KinematicBands_d_s(KinematicBands* carg1, double carg2, char * carg3);

double KinematicBands_getVerticalSpeedStep_KinematicBands(KinematicBands* carg1);

double KinematicBands_getVerticalSpeedStep_KinematicBands_s(KinematicBands* carg1, char * carg2);

void KinematicBands_setVerticalSpeedStep_KinematicBands_d(KinematicBands* carg1, double carg2);

void KinematicBands_setVerticalSpeedStep_KinematicBands_d_s(KinematicBands* carg1, double carg2, char * carg3);

double KinematicBands_getVerticalAcceleration_KinematicBands(KinematicBands* carg1);

double KinematicBands_getVerticalAcceleration_KinematicBands_s(KinematicBands* carg1, char * carg2);

void KinematicBands_setVerticalAcceleration_KinematicBands_d(KinematicBands* carg1, double carg2);

void KinematicBands_setVerticalAcceleration_KinematicBands_d_s(KinematicBands* carg1, double carg2, char * carg3);

bool KinematicBands_isEnabledRecoveryVerticalSpeedBands(KinematicBands* carg1);

void KinematicBands_setRecoveryVerticalSpeedBands(KinematicBands* carg1, bool carg2);

double KinematicBands_getMinAltitude_KinematicBands(KinematicBands* carg1);

double KinematicBands_getMinAltitude_KinematicBands_s(KinematicBands* carg1, char * carg2);

void KinematicBands_setMinAltitude_KinematicBands_d(KinematicBands* carg1, double carg2);

void KinematicBands_setMinAltitude_KinematicBands_d_s(KinematicBands* carg1, double carg2, char * carg3);

double KinematicBands_getMaxAltitude_KinematicBands(KinematicBands* carg1);

double KinematicBands_getMaxAltitude_KinematicBands_s(KinematicBands* carg1, char * carg2);

void KinematicBands_setMaxAltitude_KinematicBands_d(KinematicBands* carg1, double carg2);

void KinematicBands_setMaxAltitude_KinematicBands_d_s(KinematicBands* carg1, double carg2, char * carg3);

double KinematicBands_getAltitudeStep_KinematicBands(KinematicBands* carg1);

double KinematicBands_getAltitudeStep_KinematicBands_s(KinematicBands* carg1, char * carg2);

void KinematicBands_setAltitudeStep_KinematicBands_d(KinematicBands* carg1, double carg2);

void KinematicBands_setAltitudeStep_KinematicBands_d_s(KinematicBands* carg1, double carg2, char * carg3);

double KinematicBands_getVerticalRate_KinematicBands(KinematicBands* carg1);

double KinematicBands_getVerticalRate_KinematicBands_s(KinematicBands* carg1, char * carg2);

void KinematicBands_setVerticalRate_KinematicBands_d(KinematicBands* carg1, double carg2);

void KinematicBands_setVerticalRate_KinematicBands_d_s(KinematicBands* carg1, double carg2, char * carg3);

void KinematicBands_clear(KinematicBands* carg1);

int KinematicBands_trackLength(KinematicBands* carg1);

void KinematicBands_forceTrackBandsComputation(KinematicBands* carg1);

Interval* KinematicBands_track(KinematicBands* carg1, int carg2, char * carg3);

int KinematicBands_trackRegion(KinematicBands* carg1, int carg2);

int KinematicBands_trackRegionOf(KinematicBands* carg1, double carg2, char * carg3);

bool KinematicBands_nearTrackConflict_KinematicBands_d_d(KinematicBands* carg1, double carg2, double carg3);

bool KinematicBands_nearTrackConflict_KinematicBands_d_d_s(KinematicBands* carg1, double carg2, double carg3, char * carg4);

double KinematicBands_trackRecoveryTime(KinematicBands* carg1);

int KinematicBands_groundSpeedLength(KinematicBands* carg1);

void KinematicBands_forceGroundSpeedBandsComputation(KinematicBands* carg1);

Interval* KinematicBands_groundSpeed(KinematicBands* carg1, int carg2, char * carg3);

int KinematicBands_groundSpeedRegion(KinematicBands* carg1, int carg2);

int KinematicBands_groundSpeedRegionOf(KinematicBands* carg1, double carg2, char * carg3);

bool KinematicBands_nearGroundSpeedConflict_KinematicBands_d_d(KinematicBands* carg1, double carg2, double carg3);

bool KinematicBands_nearGroundSpeedConflict_KinematicBands_d_d_s(KinematicBands* carg1, double carg2, double carg3, char * carg4);

double KinematicBands_groundSpeedRecoveryTime(KinematicBands* carg1);

int KinematicBands_verticalSpeedLength(KinematicBands* carg1);

void KinematicBands_forceVerticalSpeedBandsComputation(KinematicBands* carg1);

Interval* KinematicBands_verticalSpeed(KinematicBands* carg1, int carg2, char * carg3);

int KinematicBands_verticalSpeedRegion(KinematicBands* carg1, int carg2);

int KinematicBands_verticalSpeedRegionOf(KinematicBands* carg1, double carg2, char * carg3);

bool KinematicBands_nearVerticalSpeedConflict_KinematicBands_d_d(KinematicBands* carg1, double carg2, double carg3);

bool KinematicBands_nearVerticalSpeedConflict_KinematicBands_d_d_s(KinematicBands* carg1, double carg2, double carg3, char * carg4);

double KinematicBands_verticalSpeedRecoveryTime(KinematicBands* carg1);

int KinematicBands_altitudeLength(KinematicBands* carg1);

void KinematicBands_forceAltitudeBandsComputation(KinematicBands* carg1);

Interval* KinematicBands_altitude(KinematicBands* carg1, int carg2, char * carg3);

int KinematicBands_altitudeRegion(KinematicBands* carg1, int carg2);

int KinematicBands_altitudeRegionOf(KinematicBands* carg1, double carg2, char * carg3);

bool KinematicBands_nearAltitudeConflict_KinematicBands_d_d(KinematicBands* carg1, double carg2, double carg3);

bool KinematicBands_nearAltitudeConflict_KinematicBands_d_d_s(KinematicBands* carg1, double carg2, double carg3, char * carg4);

void* KinematicBands_getCoreDetectionPtr(KinematicBands* carg1);

void* KinematicBands_getCoreDetectionRef(KinematicBands* carg1);

void KinematicBands_setCoreDetectionPtr(KinematicBands* carg1, void* carg2);

void KinematicBands_setCoreDetectionRef(KinematicBands* carg1, void* carg2);

char * KinematicBands_FmSet(void* carg1);

char * KinematicBands_toString(KinematicBands* carg1);

char * KinematicBands_prettyPrint(KinematicBands* carg1);

void KinematicBands_linearProjection(KinematicBands* carg1, double carg2);

bool KinematicBands_hasError(KinematicBands* carg1);

bool KinematicBands_hasMessage(KinematicBands* carg1);

char * KinematicBands_getMessage(KinematicBands* carg1);

char * KinematicBands_getMessageNoClear(KinematicBands* carg1);

bool KinematicBands_isLatLon(KinematicBands* carg1);

void delete_KinematicBands(KinematicBands * carg1);


typedef struct SwigObj_Daidalus Daidalus;

void Daidalus_VERSION_set(const char * carg1);

const char * Daidalus_VERSION_get();

Daidalus * new_Daidalus();

Daidalus * new_Daidalus_Detection3D(void* carg1);

Daidalus * copy_Daidalus(Daidalus* carg1);

void delete_Daidalus(Daidalus * carg1);

void* Daidalus_getAircraftList(Daidalus* carg1);

void Daidalus_setAircraftList(Daidalus* carg1, void* carg2, double carg3);

void Daidalus_reset(Daidalus* carg1);

void* Daidalus_getDetector(Daidalus* carg1);

void Daidalus_setDetector(Daidalus* carg1, void* carg2);

void* Daidalus_PT5();

void* Daidalus_MOPS();

void* Daidalus_getParameters(Daidalus* carg1);

int Daidalus_numberOfAircraft(Daidalus* carg1);

char * Daidalus_aircraftName(Daidalus* carg1, int carg2);

Velocity* Daidalus_getWindField(Daidalus* carg1);

void Daidalus_setWindField(Daidalus* carg1, Velocity* carg2);

void Daidalus_setOwnshipState_Daidalus_s_Position_Velocity_d(Daidalus* carg1, char * carg2, Position* carg3, Velocity* carg4, double carg5);

void Daidalus_setOwnshipState_Daidalus_TrafficState_d(Daidalus* carg1, void* carg2, double carg3);

int Daidalus_addTrafficState_Daidalus_s_Position_Velocity_d(Daidalus* carg1, char * carg2, Position* carg3, Velocity* carg4, double carg5);

int Daidalus_addTrafficState_Daidalus_s_Position_Velocity(Daidalus* carg1, char * carg2, Position* carg3, Velocity* carg4);

int Daidalus_addTrafficState_Daidalus_TrafficState_d(Daidalus* carg1, void* carg2, double carg3);

int Daidalus_addTrafficState_Daidalus_TrafficState(Daidalus* carg1, void* carg2);

void Daidalus_resetOwnship_Daidalus_i(Daidalus* carg1, int carg2);

void Daidalus_resetOwnship_Daidalus_s(Daidalus* carg1, char * carg2);

int Daidalus_aircraftIndex(Daidalus* carg1, char * carg2);

void Daidalus_clearAlertThresholds(Daidalus* carg1);

int Daidalus_mostSevereAlertThresholds(Daidalus* carg1);

bool Daidalus_setAlertThresholds(Daidalus* carg1, int carg2, void* carg3);

int Daidalus_addAlertThresholds(Daidalus* carg1, void* carg2);

void* Daidalus_getAlertThresholds(Daidalus* carg1, int carg2);

void Daidalus_setAlertor(Daidalus* carg1, void* carg2);

void* Daidalus_getAlertor(Daidalus* carg1);

void* Daidalus_lastAlertInfo(Daidalus* carg1);

int Daidalus_alertingAt(Daidalus* carg1, int carg2, double carg3);

double Daidalus_getCurrentTime(Daidalus* carg1);

int Daidalus_alerting(Daidalus* carg1, int carg2);

void* Daidalus_timeIntervalOfViolationAt(Daidalus* carg1, int carg2, double carg3);

void* Daidalus_timeIntervalOfViolation(Daidalus* carg1, int carg2);

double Daidalus_timeToViolationAt(Daidalus* carg1, int carg2, double carg3);

double Daidalus_timeToViolation(Daidalus* carg1, int carg2);

KinematicBands* Daidalus_getKinematicBandsAt(Daidalus* carg1, double carg2);

void* Daidalus_getOwnshipStateAt(Daidalus* carg1, double carg2);

void* Daidalus_getOwnshipState(Daidalus* carg1);

void* Daidalus_getTrafficStateAt(Daidalus* carg1, int carg2, double carg3);

void* Daidalus_getTrafficState(Daidalus* carg1, int carg2);

char * Daidalus_ownshipAtToPVS(Daidalus* carg1, double carg2, int carg3);

char * Daidalus_ownshipToPVS(Daidalus* carg1, int carg2);

char * Daidalus_trafficAtToPVS(Daidalus* carg1, int carg2, double carg3, int carg4);

char * Daidalus_trafficToPVS(Daidalus* carg1, int carg2, int carg3);

char * Daidalus_aircraftListAtToPVS(Daidalus* carg1, double carg2, int carg3);

char * Daidalus_aircraftListToPVS(Daidalus* carg1, int carg2);

KinematicBands* Daidalus_getKinematicBands(Daidalus* carg1);

double Daidalus_getDTHR_Daidalus(Daidalus* carg1);

double Daidalus_getZTHR_Daidalus(Daidalus* carg1);

double Daidalus_getTTHR(Daidalus* carg1);

double Daidalus_getTCOA(Daidalus* carg1);

double Daidalus_getD_Daidalus(Daidalus* carg1);

double Daidalus_getH_Daidalus(Daidalus* carg1);

void Daidalus_setDTHR_Daidalus_d(Daidalus* carg1, double carg2);

void Daidalus_setZTHR_Daidalus_d(Daidalus* carg1, double carg2);

void Daidalus_setTTHR(Daidalus* carg1, double carg2);

void Daidalus_setTCOA(Daidalus* carg1, double carg2);

void Daidalus_setD_Daidalus_d(Daidalus* carg1, double carg2);

void Daidalus_setH_Daidalus_d(Daidalus* carg1, double carg2);

double Daidalus_getDTHR_Daidalus_s(Daidalus* carg1, char * carg2);

double Daidalus_getZTHR_Daidalus_s(Daidalus* carg1, char * carg2);

double Daidalus_getD_Daidalus_s(Daidalus* carg1, char * carg2);

double Daidalus_getH_Daidalus_s(Daidalus* carg1, char * carg2);

void Daidalus_setDTHR_Daidalus_d_s(Daidalus* carg1, double carg2, char * carg3);

void Daidalus_setZTHR_Daidalus_d_s(Daidalus* carg1, double carg2, char * carg3);

void Daidalus_setD_Daidalus_d_s(Daidalus* carg1, double carg2, char * carg3);

void Daidalus_setH_Daidalus_d_s(Daidalus* carg1, double carg2, char * carg3);

double Daidalus_getAlertingTime_Daidalus(Daidalus* carg1);

double Daidalus_getAlertingTime_Daidalus_s(Daidalus* carg1, char * carg2);

double Daidalus_getLookaheadTime_Daidalus(Daidalus* carg1);

double Daidalus_getLookaheadTime_Daidalus_s(Daidalus* carg1, char * carg2);

double Daidalus_getMinGroundSpeed_Daidalus(Daidalus* carg1);

double Daidalus_getMinGroundSpeed_Daidalus_s(Daidalus* carg1, char * carg2);

double Daidalus_getMaxGroundSpeed_Daidalus(Daidalus* carg1);

double Daidalus_getMaxGroundSpeed_Daidalus_s(Daidalus* carg1, char * carg2);

double Daidalus_getMinVerticalSpeed_Daidalus(Daidalus* carg1);

double Daidalus_getMinVerticalSpeed_Daidalus_s(Daidalus* carg1, char * carg2);

double Daidalus_getMaxVerticalSpeed_Daidalus(Daidalus* carg1);

double Daidalus_getMaxVerticalSpeed_Daidalus_s(Daidalus* carg1, char * carg2);

double Daidalus_getMinAltitude_Daidalus(Daidalus* carg1);

double Daidalus_getMinAltitude_Daidalus_s(Daidalus* carg1, char * carg2);

double Daidalus_getMaxAltitude_Daidalus(Daidalus* carg1);

double Daidalus_getMaxAltitude_Daidalus_s(Daidalus* carg1, char * carg2);

double Daidalus_getTrackStep_Daidalus(Daidalus* carg1);

double Daidalus_getTrackStep_Daidalus_s(Daidalus* carg1, char * carg2);

double Daidalus_getGroundSpeedStep_Daidalus(Daidalus* carg1);

double Daidalus_getGroundSpeedStep_Daidalus_s(Daidalus* carg1, char * carg2);

double Daidalus_getVerticalSpeedStep_Daidalus(Daidalus* carg1);

double Daidalus_getVerticalSpeedStep_Daidalus_s(Daidalus* carg1, char * carg2);

double Daidalus_getAltitudeStep_Daidalus(Daidalus* carg1);

double Daidalus_getAltitudeStep_Daidalus_s(Daidalus* carg1, char * carg2);

double Daidalus_getHorizontalAcceleration_Daidalus(Daidalus* carg1);

double Daidalus_getHorizontalAcceleration_Daidalus_s(Daidalus* carg1, char * carg2);

double Daidalus_getVerticalAcceleration_Daidalus(Daidalus* carg1);

double Daidalus_getVerticalAcceleration_Daidalus_s(Daidalus* carg1, char * carg2);

double Daidalus_getTurnRate_Daidalus(Daidalus* carg1);

double Daidalus_getTurnRate_Daidalus_s(Daidalus* carg1, char * carg2);

double Daidalus_getBankAngle_Daidalus(Daidalus* carg1);

double Daidalus_getBankAngle_Daidalus_s(Daidalus* carg1, char * carg2);

double Daidalus_getVerticalRate_Daidalus(Daidalus* carg1);

double Daidalus_getVerticalRate_Daidalus_s(Daidalus* carg1, char * carg2);

double Daidalus_getRecoveryStabilityTime_Daidalus(Daidalus* carg1);

double Daidalus_getRecoveryStabilityTime_Daidalus_s(Daidalus* carg1, char * carg2);

double Daidalus_getMaxRecoveryTime_Daidalus(Daidalus* carg1);

double Daidalus_getMaxRecoveryTime_Daidalus_s(Daidalus* carg1, char * carg2);

double Daidalus_getMinHorizontalRecovery_Daidalus(Daidalus* carg1);

double Daidalus_getMinHorizontalRecovery_Daidalus_s(Daidalus* carg1, char * carg2);

double Daidalus_getMinVerticalRecovery_Daidalus(Daidalus* carg1);

double Daidalus_getMinVerticalRecovery_Daidalus_s(Daidalus* carg1, char * carg2);

void Daidalus_setAlertingTime_Daidalus_d(Daidalus* carg1, double carg2);

void Daidalus_setAlertingTime_Daidalus_d_s(Daidalus* carg1, double carg2, char * carg3);

void Daidalus_setLookaheadTime_Daidalus_d(Daidalus* carg1, double carg2);

void Daidalus_setLookaheadTime_Daidalus_d_s(Daidalus* carg1, double carg2, char * carg3);

void Daidalus_setMinGroundSpeed_Daidalus_d(Daidalus* carg1, double carg2);

void Daidalus_setMinGroundSpeed_Daidalus_d_s(Daidalus* carg1, double carg2, char * carg3);

void Daidalus_setMaxGroundSpeed_Daidalus_d(Daidalus* carg1, double carg2);

void Daidalus_setMaxGroundSpeed_Daidalus_d_s(Daidalus* carg1, double carg2, char * carg3);

void Daidalus_setMinVerticalSpeed_Daidalus_d(Daidalus* carg1, double carg2);

void Daidalus_setMinVerticalSpeed_Daidalus_d_s(Daidalus* carg1, double carg2, char * carg3);

void Daidalus_setMaxVerticalSpeed_Daidalus_d(Daidalus* carg1, double carg2);

void Daidalus_setMaxVerticalSpeed_Daidalus_d_s(Daidalus* carg1, double carg2, char * carg3);

void Daidalus_setMinAltitude_Daidalus_d(Daidalus* carg1, double carg2);

void Daidalus_setMinAltitude_Daidalus_d_s(Daidalus* carg1, double carg2, char * carg3);

void Daidalus_setMaxAltitude_Daidalus_d(Daidalus* carg1, double carg2);

void Daidalus_setMaxAltitude_Daidalus_d_s(Daidalus* carg1, double carg2, char * carg3);

bool Daidalus_isEnabledImplicitBands(Daidalus* carg1);

void Daidalus_setImplicitBands(Daidalus* carg1, bool carg2);

void Daidalus_enableImplicitBands(Daidalus* carg1);

void Daidalus_disableImplicitBands(Daidalus* carg1);

void Daidalus_setTrackStep_Daidalus_d(Daidalus* carg1, double carg2);

void Daidalus_setTrackStep_Daidalus_d_s(Daidalus* carg1, double carg2, char * carg3);

void Daidalus_setGroundSpeedStep_Daidalus_d(Daidalus* carg1, double carg2);

void Daidalus_setGroundSpeedStep_Daidalus_d_s(Daidalus* carg1, double carg2, char * carg3);

void Daidalus_setVerticalSpeedStep_Daidalus_d(Daidalus* carg1, double carg2);

void Daidalus_setVerticalSpeedStep_Daidalus_d_s(Daidalus* carg1, double carg2, char * carg3);

void Daidalus_setAltitudeStep_Daidalus_d(Daidalus* carg1, double carg2);

void Daidalus_setAltitudeStep_Daidalus_d_s(Daidalus* carg1, double carg2, char * carg3);

void Daidalus_setHorizontalAcceleration_Daidalus_d(Daidalus* carg1, double carg2);

void Daidalus_setHorizontalAcceleration_Daidalus_d_s(Daidalus* carg1, double carg2, char * carg3);

void Daidalus_setVerticalAcceleration_Daidalus_d(Daidalus* carg1, double carg2);

void Daidalus_setVerticalAcceleration_Daidalus_d_s(Daidalus* carg1, double carg2, char * carg3);

void Daidalus_setTurnRate_Daidalus_d(Daidalus* carg1, double carg2);

void Daidalus_setTurnRate_Daidalus_d_s(Daidalus* carg1, double carg2, char * carg3);

void Daidalus_setBankAngle_Daidalus_d(Daidalus* carg1, double carg2);

void Daidalus_setBankAngle_Daidalus_d_s(Daidalus* carg1, double carg2, char * carg3);

void Daidalus_setVerticalRate_Daidalus_d(Daidalus* carg1, double carg2);

void Daidalus_setVerticalRate_Daidalus_d_s(Daidalus* carg1, double carg2, char * carg3);

void Daidalus_setRecoveryStabilityTime_Daidalus_d(Daidalus* carg1, double carg2);

void Daidalus_setRecoveryStabilityTime_Daidalus_d_s(Daidalus* carg1, double carg2, char * carg3);

void Daidalus_setMaxRecoveryTime_Daidalus_d(Daidalus* carg1, double carg2);

void Daidalus_setMaxRecoveryTime_Daidalus_d_s(Daidalus* carg1, double carg2, char * carg3);

void Daidalus_setMinHorizontalRecovery_Daidalus_d(Daidalus* carg1, double carg2);

void Daidalus_setMinHorizontalRecovery_Daidalus_d_s(Daidalus* carg1, double carg2, char * carg3);

void Daidalus_setMinVerticalRecovery_Daidalus_d(Daidalus* carg1, double carg2);

void Daidalus_setMinVerticalRecovery_Daidalus_d_s(Daidalus* carg1, double carg2, char * carg3);

void* Daidalus_getUrgencyStrategyRef(Daidalus* carg1);

void Daidalus_setUrgencyStrategy(Daidalus* carg1, void* carg2);

void* Daidalus_mostUrgentAircraftAt(Daidalus* carg1, double carg2);

bool Daidalus_isEnabledConflictCriteria(Daidalus* carg1);

void Daidalus_setConflictCriteria(Daidalus* carg1, bool carg2);

void Daidalus_enableConflictCriteria(Daidalus* carg1);

void Daidalus_disableConflictCriteria(Daidalus* carg1);

bool Daidalus_isEnabledRecoveryCriteria(Daidalus* carg1);

void Daidalus_setRecoveryCriteria(Daidalus* carg1, bool carg2);

void Daidalus_enableRecoveryCriteria(Daidalus* carg1);

void Daidalus_disableRecoveryCriteria(Daidalus* carg1);

void Daidalus_setRepulsiveCriteria(Daidalus* carg1, bool carg2);

void Daidalus_enableRepulsiveCriteria(Daidalus* carg1);

void Daidalus_disableRepulsiveCriteria(Daidalus* carg1);

bool Daidalus_isEnabledRecoveryTrackBands(Daidalus* carg1);

bool Daidalus_isEnabledRecoveryGroundSpeedBands(Daidalus* carg1);

bool Daidalus_isEnabledRecoveryVerticalSpeedBands(Daidalus* carg1);

void Daidalus_setRecoveryTrackBands(Daidalus* carg1, bool carg2);

void Daidalus_setRecoveryGroundSpeedBands(Daidalus* carg1, bool carg2);

void Daidalus_setRecoveryVerticalSpeedBands(Daidalus* carg1, bool carg2);

void Daidalus_setRecoveryBands(Daidalus* carg1, bool carg2);

void Daidalus_enableRecoveryBands(Daidalus* carg1);

void Daidalus_disableRecoveryBands(Daidalus* carg1);

bool Daidalus_isEnabledBandsAlerting(Daidalus* carg1);

bool Daidalus_isEnabledThresholdsAlerting(Daidalus* carg1);

void Daidalus_setBandsAlerting(Daidalus* carg1, bool carg2);

void Daidalus_enableBandsAlerting(Daidalus* carg1);

void Daidalus_enableThresholdsAlerting(Daidalus* carg1);

bool Daidalus_isEnabledTrackAlerting(Daidalus* carg1);

bool Daidalus_isEnabledGroundSpeedAlerting(Daidalus* carg1);

bool Daidalus_isEnabledVerticalSpeedAlerting(Daidalus* carg1);

void Daidalus_setTrackAlerting(Daidalus* carg1, bool carg2);

void Daidalus_setGroundSpeedAlerting(Daidalus* carg1, bool carg2);

void Daidalus_setVerticalSpeedAlerting(Daidalus* carg1, bool carg2);

double Daidalus_getPreventiveAltitudeThreshold_Daidalus(Daidalus* carg1);

double Daidalus_getPreventiveAltitudeThreshold_Daidalus_s(Daidalus* carg1, char * carg2);

double Daidalus_getPreventiveTrackThreshold_Daidalus(Daidalus* carg1);

double Daidalus_getPreventiveTrackThreshold_Daidalus_s(Daidalus* carg1, char * carg2);

double Daidalus_getPreventiveGroundSpeedThreshold_Daidalus(Daidalus* carg1);

double Daidalus_getPreventiveGroundSpeedThreshold_Daidalus_s(Daidalus* carg1, char * carg2);

double Daidalus_getPreventiveVerticalSpeedThreshold_Daidalus(Daidalus* carg1);

double Daidalus_getPreventiveVerticalSpeedThreshold_Daidalus_s(Daidalus* carg1, char * carg2);

double Daidalus_getTimeToWarningThreshold(Daidalus* carg1);

bool Daidalus_isEnabledWarningWhenRecovery(Daidalus* carg1);

bool Daidalus_isEnabledWarningWhenViolation(Daidalus* carg1);

void Daidalus_setPreventiveAltitudeThreshold_Daidalus_d(Daidalus* carg1, double carg2);

void Daidalus_setPreventiveAltitudeThreshold_Daidalus_d_s(Daidalus* carg1, double carg2, char * carg3);

void Daidalus_setPreventiveTrackThreshold_Daidalus_d(Daidalus* carg1, double carg2);

void Daidalus_setPreventiveTrackThreshold_Daidalus_d_s(Daidalus* carg1, double carg2, char * carg3);

void Daidalus_setPreventiveGroundSpeedThreshold_Daidalus_d(Daidalus* carg1, double carg2);

void Daidalus_setPreventiveGroundSpeedThreshold_Daidalus_d_s(Daidalus* carg1, double carg2, char * carg3);

void Daidalus_setPreventiveVerticalSpeedThreshold_Daidalus_d(Daidalus* carg1, double carg2);

void Daidalus_setPreventiveVerticalSpeedThreshold_Daidalus_d_s(Daidalus* carg1, double carg2, char * carg3);

void Daidalus_setTimeToWarningThreshold(Daidalus* carg1, double carg2);

void Daidalus_setWarningWhenRecovery(Daidalus* carg1, bool carg2);

void Daidalus_enableWarningWhenRecovery(Daidalus* carg1);

void Daidalus_enableWarningWhenViolation(Daidalus* carg1);

bool Daidalus_isEnabledCollisionAvoidanceBands(Daidalus* carg1);

void Daidalus_setCollisionAvoidanceBands(Daidalus* carg1, bool carg2);

void Daidalus_enableCollisionAvoidanceBands(Daidalus* carg1);

void Daidalus_disableCollisionAvoidanceBands(Daidalus* carg1);

bool Daidalus_loadParametersFromFile(Daidalus* carg1, char * carg2);

bool Daidalus_saveParametersToFile(Daidalus* carg1, char * carg2);

void Daidalus_updateParameterData(Daidalus* carg1, void* carg2);

void Daidalus_setParameters(Daidalus* carg1, void* carg2);

char * Daidalus_toString(Daidalus* carg1);

bool Daidalus_hasError(Daidalus* carg1);

bool Daidalus_hasMessage(Daidalus* carg1);

char * Daidalus_getMessage(Daidalus* carg1);

char * Daidalus_getMessageNoClear(Daidalus* carg1);


#endif /* _Daidalus_proxy_H_ */
